"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫.

–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç PDF-—Ñ–∞–π–ª—ã, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö,
–∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
"""

__version__ = "3.7.3"

# === Standard library imports ===
import os
import sys
import socket
import logging
from io import BytesIO
from tempfile import NamedTemporaryFile
import asyncio
import time
import yaml
import re
from datetime import datetime
import inspect

# === Third-party imports ===
import pandas as pd
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

# === Local imports ===
from handlers.pdf_type_filter import register_pdf_type_handler
from handlers.export import register_export_handlers, show_filters_menu, generate_report
from handlers.edit import build_edit_keyboard, get_valid_ids, apply_edits
from handlers.filters import get_default_filters
# from handlers.config import register_config_handlers
from handlers.pdf_processing import register_pdf_handlers, cleanup_files
from handlers.logs import register_log_handlers, sanitize_log_content
from handlers.restart import register_restart_handlers
from handlers.duplicates import register_duplicate_handlers
from handlers.config_handlers import register_config_menu_handlers
# from handlers.config_handlers import show_config_menu

from db.base import DBConnection
from db.transactions import (
    save_transactions,
    get_transactions,
    get_last_import_ids,
    get_unique_values,
    get_min_max_dates_by_pdf_type,
)
from config.env import TELEGRAM_BOT_TOKEN, ADMINS, DOCKER_MODE
from config.logging import setup_logging
from config.general import load_general_settings
from config.timeouts import load_timeouts

from utils.parser import parse_settings_from_text


print(">>> setup_logging() –¥–æ–ª–∂–µ–Ω —Å–µ–π—á–∞—Å –≤—ã–∑–≤–∞—Ç—å—Å—è <<<")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

ALLOWED_USERS = ADMINS
    
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def admin_only(func):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    async def wrapper(*args, **kwargs):  # –°–∞–º wrapper –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å async
        _update_ = None 

        # --- –ù–∞—á–∞–ª–æ: –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞ update –∏ user_id ---
        if len(args) >= 2 and isinstance(args[1], Update):
            _update_ = args[1]
        elif len(args) >= 1 and isinstance(args[0], Update):
            _update_ = args[0]
        elif 'update' in kwargs and isinstance(kwargs['update'], Update):
            _update_ = kwargs['update']
        else:
            _found_update_ = next((arg for arg in args if isinstance(arg, Update)), None)
            if not _found_update_:
                _found_update_ = next((val for val in kwargs.values() if isinstance(val, Update)), None)

            if _found_update_:
                _update_ = _found_update_
            else:
                logger.error(f"admin_only ({func.__name__}): –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç Update –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")
                # –ï—Å–ª–∏ update –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if inspect.iscoroutinefunction(func):
                    return await func(*args, **kwargs)
                else:
                    return func(*args, **kwargs) # –í—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

        if not _update_ or not hasattr(_update_, 'effective_user') or not _update_.effective_user:
            logger.error(f"admin_only ({func.__name__}): –û–±—ä–µ–∫—Ç Update –∏–ª–∏ effective_user –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            if inspect.iscoroutinefunction(func):
                return await func(*args, **kwargs)
            else:
                return func(*args, **kwargs)

        user_id = _update_.effective_user.id
        logger.debug(f"admin_only ({func.__name__}): –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è user_id: {user_id}. –í—Ö–æ–¥–∏—Ç –≤ ALLOWED_USERS: {user_id in ALLOWED_USERS}")

        if user_id not in ALLOWED_USERS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} –∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
            if hasattr(_update_, 'message') and _update_.message:
                await _update_.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            elif hasattr(_update_, 'callback_query') and _update_.callback_query:
                await _update_.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                logger.debug(f"admin_only ({func.__name__}): –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return
        # --- –ö–æ–Ω–µ—Ü: –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ---

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if inspect.iscoroutinefunction(func):
            return await func(*args, **kwargs)
        else:
            return func(*args, **kwargs)
    return wrapper

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—É—Å–∫
try:
    lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    lock_socket.bind('\0' + 'transaction_bot_lock')  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
except socket.error:
    print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
from extract_transactions_pdf1 import process_pdf as extract_pdf1
from extract_transactions_pdf2 import process_csv as extract_pdf2
from classify_transactions_pdf import (classify_transactions, add_pattern_to_category)


class TransactionProcessorBot:
    def __init__(self, token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, –∑–∞–≥—Ä—É–∂–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
        self._active_tasks = 0
        self._max_active_tasks = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞

        self._is_running = False
        self._is_restarting = False  # –§–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏  
        self._in_docker = os.getenv('DOCKER_MODE') is not None

        # –õ–æ–≥–∏—Ä—É–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # for i, handler_obj in enumerate(self.config_handlers):
        #     handler_name = "handle_config_edit" if i == 0 else "handle_config_upload"
        #     logger.debug(f"__init__: –°–æ–∑–¥–∞–Ω config_handler ({handler_name}) —Å ID: {id(handler_obj)}")

        if not self._in_docker:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–Ω–µ Docker
            try:
                lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
                lock_socket.bind('\0' + 'transaction_bot_lock')
            except socket.error:
                print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
                sys.exit(1)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        timeouts = load_timeouts()
        self.download_timeout = timeouts['download_timeout']
        self.processing_timeout = timeouts['processing_timeout']
        self.request_timeout = timeouts['request_timeout']
        self.delay_between_operations = timeouts['delay_between_operations']

        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        general_settings = load_general_settings()

        self.log_lines_to_show = general_settings.get('log_lines_to_show', 50) # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50, –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç
        logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤: {self.log_lines_to_show}")
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è export_last_import_ids_count
        self.export_last_import_ids_count = general_settings.get('export_last_import_ids_count', 10)
        logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö import_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤: {self.export_last_import_ids_count}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Application
        self.application = Application.builder() \
            .token(token) \
            .read_timeout(self.request_timeout) \
            .write_timeout(self.request_timeout) \
            .build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()

    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        self.application.add_handler(CommandHandler("start", self.start))
        # self.application.add_handler(CommandHandler("config", show_config_menu))
        self.application.add_handler(CommandHandler("restart", self.restart_bot))
        self.application.add_handler(CommandHandler("add_pattern", self.add_pattern))
        self.application.add_handler(CommandHandler("add_settings", self.add_settings))
        self.application.add_handler(CommandHandler("settings", self.show_settings))
        self.application.add_handler(CommandHandler("edit", self.start_edit))
        self.application.add_handler(CommandHandler("reset", self.reset_settings))
        self.application.add_handler(CommandHandler("date_ranges", self.get_min_max_dates))

        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π ConversationHandler
        register_pdf_type_handler(self.application, show_filters_menu)
        register_export_handlers(self.application)
        # register_config_handlers(self.application, self)
        register_pdf_handlers(self.application, self)
        register_log_handlers(self.application, self)
        register_restart_handlers(self.application, self)
        register_duplicate_handlers(self.application, self)
        register_config_menu_handlers(self.application)

        
        self.application.add_handler(CallbackQueryHandler(self.handle_calendar_callback, pattern=r"^cbcal_"),group=0)
        self.application.add_handler(CallbackQueryHandler(self.handle_import_id_callback, pattern='^import_id_'))
        # self.application.add_handler(CallbackQueryHandler(self.debug_callback, pattern='.*'),group=0)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        self.application.add_handler(CallbackQueryHandler(
            self.handle_edit_choice,
            pattern='^(edit_by_id|edit_by_filter|cancel_edit)$'
        ))
        self.application.add_handler(CallbackQueryHandler(
            self.select_edit_mode,
            pattern='^edit_field_[a-z_]+$'
        ))
        self.application.add_handler(CallbackQueryHandler(
            self.get_new_value,
            pattern='^edit_mode_(replace|append)$'
        ))

        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^(\d+[\s,-]*)+\d+$'),self.process_ids_input)) #, group=1)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_input)) # –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ apply_edits
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,self.apply_edits))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)        
        self.application.add_handler(
            CallbackQueryHandler(
                self.handle_pattern_callback,
                pattern='^addpat_'
            )
        )
        
        self.application.add_handler(
            CallbackQueryHandler(
                self.add_pattern_interactive,
                pattern='^add_pattern_interactive$'
            )
        )
        
        self.application.add_handler(CallbackQueryHandler(self.handle_edit_filter_proceed, pattern='^edit_filter_proceed_to_fields$'))

        self.application.add_handler(CommandHandler("cancel", self.cancel_operation))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    @admin_only
    async def get_min_max_dates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /max_dates (–∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã).
        –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏
        –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ pdf_type.
        """
        try:
            with DBConnection() as db:
                date_ranges = get_min_max_dates_by_pdf_type(user_id=update.effective_user.id, db=db)

            if not date_ranges:
                await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–∞—Ö –ø–æ —Ç–∏–ø–∞–º PDF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º PDF.")
                return

            response_lines = ["‚öôÔ∏è **–î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –ø–æ —Ç–∏–ø–∞–º PDF:**\n"]
            for item in date_ranges:
                pdf_type = item.get('pdf_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                min_date = item.get('min_date')
                max_date = item.get('max_date')
                min_date_full_str = min_date.strftime('%d.%m.%Y %H:%M') if min_date else '–Ω/–¥'
                max_date_full_str = max_date.strftime('%d.%m.%Y %H:%M') if max_date else '–Ω/–¥'
                response_lines.append(f"‚ñ™Ô∏è *{pdf_type}*:\n           min: `{min_date_full_str}`\n           max: `{max_date_full_str}`")
            response_text = "\n".join(response_lines)
            await update.message.reply_text(response_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /date_ranges: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_edit_filter_proceed(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        await query.answer()

        if not context.user_data.get('edit_mode') or \
        context.user_data['edit_mode'].get('type') != 'edit_by_filter' or \
        not context.user_data['edit_mode'].get('edit_filters'):
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            context.user_data.pop('edit_mode', None)
            return

        # –§–∏–ª—å—Ç—Ä—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ context.user_data['edit_mode']['edit_filters']
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) –ø–æ–ª—É—á–∏—Ç—å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —ç—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        # –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ context.user_data['edit_mode']['ids']
        try:
            filters_for_db = context.user_data['edit_mode']['edit_filters']
            db_parsed_filters = {}
            filter_keys_to_transfer = [
                'category', 'transaction_type', 'cash_source', 'description',
                'counterparty', 'check_num', 'transaction_class'
            ]
            for key in filter_keys_to_transfer:
                if key in filters_for_db and filters_for_db[key] != '–í—Å–µ':
                    if key in ['counterparty', 'check_num', 'description']:
                        if isinstance(filters_for_db[key], str) and filters_for_db[key].strip():
                            db_parsed_filters[key] = filters_for_db[key].strip()
                    else:
                        db_parsed_filters[key] = filters_for_db[key]
            if filters_for_db.get('import_id') is not None and filters_for_db['import_id'] != '–í—Å–µ':
                db_parsed_filters['import_id'] = filters_for_db['import_id']
            logger.debug(f"db_parsed_filters –¥–ª—è handle_edit_filter_proceed: {db_parsed_filters}")
            start_date_dt = datetime.strptime(filters_for_db['start_date'], '%d.%m.%Y')
            end_date_dt = datetime.strptime(filters_for_db['end_date'], '%d.%m.%Y')
            with DBConnection() as db:
                df_transactions = get_transactions(
                    user_id=update.effective_user.id,
                    start_date=start_date_dt,
                    end_date=end_date_dt,
                    filters=db_parsed_filters if db_parsed_filters else None,
                    db=db
                )
            ids_from_filter = df_transactions['id'].tolist()
            if not ids_from_filter:
                await query.edit_message_text("‚ö† –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            context.user_data['edit_mode']['ids'] = ids_from_filter
            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: –Ω–∞–π–¥–µ–Ω–æ {len(ids_from_filter)} ID. IDs: {ids_from_filter[:10]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: {e}", exc_info=True)
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            context.user_data.pop('edit_mode', None)
            return
        await query.edit_message_text(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(ids_from_filter)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await build_edit_keyboard(update, context)


    @admin_only
    async def start_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit"""
        context.user_data['edit_mode'] = {}  # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üÜî –ü–æ ID –∑–∞–ø–∏—Å–∏", callback_data='edit_by_id')],
            [InlineKeyboardButton("üîç –ü–æ —Ñ–∏–ª—å—Ç—Ä—É", callback_data='edit_by_filter')],
            [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
        ]
        await update.message.reply_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_edit_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_edit_choice':
            await self.start_edit(update, context)
            return
        elif query.data == 'cancel_edit':
            await query.edit_message_text("‚ÑπÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            context.user_data.pop('edit_mode', None)
            return     
        elif query.data == 'edit_by_filter': # –±—ã–ª–æ `else:`
            if 'edit_mode' not in context.user_data:
                context.user_data['edit_mode'] = {}
            if 'edit_filters' not in context.user_data['edit_mode']:
                # –ü–æ–ª—É—á–∞–µ–º default_filters –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                default_filters = get_default_filters()
                context.user_data['edit_mode']['edit_filters'] = default_filters.copy()
            context.user_data['edit_mode']['type'] = 'edit_by_filter'
            await show_filters_menu(update, context, edit_mode=True)

        if query.data == 'edit_by_id':
            context.user_data['edit_mode'] = {'type': 'edit_by_id', 'awaiting_ids': True} # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15, 28, 42):\n"
                "–ò–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (15-28)"
            )
        else:  # edit_by_filter
            await show_filters_menu(update, context, edit_mode=True)


    async def process_ids_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –∑–∞–ø–∏—Å–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        try:
            ids = get_valid_ids(update.message.text.strip())
        except ValueError as e:
            await update.message.reply_text(str(e))
            return

        context.user_data['edit_mode'] = {
            'type': 'edit_by_id',
            'ids': ids
        }

        await update.message.reply_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=build_edit_keyboard()
        )


    async def _select_fields_to_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.debug(f"–í—ã–∑–æ–≤ _select_fields_to_edit –¥–ª—è user_id: {update.effective_user.id}")

        keyboard = [
            [InlineKeyboardButton("üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data='edit_field_category')],
            [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit_field_description')],
            [InlineKeyboardButton("üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", callback_data='edit_field_counterparty')],
            [InlineKeyboardButton("üßæ –ß–µ–∫ #", callback_data='edit_field_check_num')],
            [InlineKeyboardButton("üí≥ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å", callback_data='edit_field_cash_source')],
            [InlineKeyboardButton("üìÑ –¢–∏–ø PDF", callback_data='edit_field_pdf_type')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_edit_choice')],
            [InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
        ]
        
        if isinstance(update, Update) and update.callback_query:
            await update.callback_query.edit_message_text(
                "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=build_edit_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=build_edit_keyboard()
            )

    async def select_edit_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)"""
        query = update.callback_query
        await query.answer()
        
        field = query.data.replace('edit_field_', '')
        context.user_data['edit_mode']['field'] = field
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data='edit_mode_replace')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='edit_mode_append')],
            [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
        ]
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è '{field}':",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def get_new_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        context.user_data['edit_mode']['mode'] = query.data.replace('edit_mode_', '')
        
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{context.user_data['edit_mode']['field']}':\n"
            f"(–†–µ–∂–∏–º: {'–∑–∞–º–µ–Ω–∞' if context.user_data['edit_mode']['mode'] == 'replace' else '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'})"
        )


    async def apply_edits(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—é –¥–ª—è –∑–∞–ø–∏—Å–µ–π, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ context.user_data['edit_mode'].
        """
        try:
            user_id = update.effective_user.id
            edit_mode = context.user_data.get('edit_mode', {})
            new_value = update.message.text

            count, field = await apply_edits(context, user_id, edit_mode, new_value)

            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π!\n"
                f"–ü–æ–ª–µ: {field}\n"
                f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        finally:
            context.user_data.pop('edit_mode', None)


    async def handle_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        query = update.callback_query
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {query.data}")
        # await query.answer()
        
        result, key, step = DetailedTelegramCalendar(locale='ru').process(query.data)

        calendar_context = context.user_data.get("calendar_context")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
        is_editing_filters = (
            context.user_data.get('edit_mode') and
            context.user_data['edit_mode'].get('type') == 'edit_by_filter'
        )

        if not result and key:
            # ... (–ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è) ...
            # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
            if calendar_context == "start_date":
                context_text_ru = "–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞"
            elif calendar_context == "end_date":
                context_text_ru = "–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è"
            else:
                context_text_ru = "–¥–∞—Ç—É"
            await query.edit_message_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ {context_text_ru} ({LSTEP[step]}):", reply_markup=key)
        elif result:
            selected_date_str = result.strftime('%d.%m.%Y')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            if is_editing_filters:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'edit_filters' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ 'edit_mode'
                if 'edit_filters' not in context.user_data.get('edit_mode', {}): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ edit_mode —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if 'edit_mode' not in context.user_data: # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è edit_mode –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                         context.user_data['edit_mode'] = {}
                    context.user_data['edit_mode']['edit_filters'] = get_default_filters().copy()
                
                target_filters_dict = context.user_data['edit_mode']['edit_filters']
                log_source_for_filters = "edit_mode['edit_filters']"
            else:
                if 'export_filters' not in context.user_data:
                    context.user_data['export_filters'] = get_default_filters().copy()
                target_filters_dict = context.user_data['export_filters']
                log_source_for_filters = "export_filters"
            
            logger.debug(f"handle_calendar_callback: –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã ({log_source_for_filters}) –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {target_filters_dict}")

            if calendar_context == "start_date":
                target_filters_dict['start_date'] = selected_date_str
                logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ {log_source_for_filters}: {selected_date_str}")
            elif calendar_context == "end_date":
                target_filters_dict['end_date'] = selected_date_str
                logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ {log_source_for_filters}: {selected_date_str}")

            logger.debug(f"handle_calendar_callback: –§–∏–ª—å—Ç—Ä—ã ({log_source_for_filters}) –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {target_filters_dict}")
            
            if "calendar_context" in context.user_data:
                del context.user_data["calendar_context"]

            await show_filters_menu(update, context, edit_mode=is_editing_filters)


    async def debug_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ callback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        query = update.callback_query
        # logger.info("–ü–æ–ª—É—á–µ–Ω callback: %s", query.data)
        logger.debug(f"DEBUG_CALLBACK: –ü–æ–ª—É—á–µ–Ω callback_data: '{query.data}' –æ—Ç user_id: {query.from_user.id}") # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥
        await query.answer()

    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        user_id = update.message.from_user.id
        text = update.message.text.strip() # –ò—Å–ø–æ–ª—å–∑—É–µ–º strip() –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤

        edit_mode_data = context.user_data.get('edit_mode') or {}
        is_in_edit_process = bool(edit_mode_data.get('field') and edit_mode_data.get('mode')) # –£—Ç–æ—á–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∂–¥–µ–º –ª–∏ –º—ã –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è

        logger.debug(f"handle_text_input: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ '{text}' –¥–ª—è user_id {user_id}. –†–µ–∂–∏–º: {'edit_mode' if is_in_edit_process else '—Ñ–∏–ª—å—Ç—Ä—ã/awaiting_input'}")
        logger.debug(f"handle_text_input: awaiting_input = {context.user_data.get('awaiting_input')}, edit_mode = {edit_mode_data}")


        if not text:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑
            if context.user_data.get('awaiting_input'):
                 await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞.")
                 # –í–∞–∂–Ω–æ –Ω–µ –æ—á–∏—â–∞—Ç—å awaiting_input –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ
                 return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            else:
                # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
                logger.debug("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –±–µ–∑ –æ–∂–∏–¥–∞—é—â–µ–≥–æ await_input.")
                return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–µ—Å–µ—Ç —Å–º—ã—Å–ª–∞

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è ---
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
        if is_in_edit_process:
            # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –∏ –æ–∂–∏–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            logger.debug(f"handle_text_input: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è. –ü–µ—Ä–µ–¥–∞—á–∞ –≤ apply_edits.")
            await self.apply_edits(update, context)
            return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å
        # ----------------------------------------------------------

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID ---
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Ç–æ—Ä—ã–º
        # if context.user_data.get('edit_mode', {}).get('type') == 'edit_by_id' and context.user_data.get('edit_mode', {}).get('awaiting_ids'):

        edit_mode_data = context.user_data.get('edit_mode')
        if not isinstance(edit_mode_data, dict):
            edit_mode_data = {}
            context.user_data['edit_mode'] = edit_mode_data

        if edit_mode_data.get('type') == 'edit_by_id' and edit_mode_data.get('awaiting_ids'):

             logger.debug(f"handle_text_input: –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π –≤–≤–æ–¥ ID –¥–ª—è edit_by_id. –ü–µ—Ä–µ–¥–∞—á–∞ –≤ process_ids_input.")
             # process_ids_input –¥–æ–ª–∂–µ–Ω —Å–∞–º —Å–±—Ä–æ—Å–∏—Ç—å awaiting_ids –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
             await self.process_ids_input(update, context)
             # –í–∞–∂–Ω–æ: process_ids_input –¥–æ–ª–∂–µ–Ω —Å–∞–º —Ä–µ—à–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑—ã–≤–∞—Ç—å _select_fields_to_edit) –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å (–µ—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).
             # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∏–∂–µ.
             return
        # ----------------------------------------------------------


        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—ç–∫—Å–ø–æ—Ä—Ç –∏–ª–∏ edit_by_filter), –∫–æ–≥–¥–∞ –≤–≤–æ–¥–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ ---
        # –ü–æ–ª—É—á–∞–µ–º default_filters –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –û–î–ò–ù –†–ê–ó
        default_filters = get_default_filters() # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–µ –Ω—É–∂–Ω–æ await

        edit_mode_active = edit_mode_data.get('type') == 'edit_by_filter'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã
        if edit_mode_active:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'edit_filters' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –µ—Å–ª–∏ –Ω–µ—Ç
            if 'edit_filters' not in context.user_data.get('edit_mode', {}):
                context.user_data.setdefault('edit_mode', {})['edit_filters'] = default_filters.copy()
            filters_storage = context.user_data['edit_mode']['edit_filters']
        else: # –≠—Ç–æ –¥–ª—è export_filters
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'export_filters' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –µ—Å–ª–∏ –Ω–µ—Ç
            if 'export_filters' not in context.user_data:
                 context.user_data['export_filters'] = default_filters.copy()
            filters_storage = context.user_data['export_filters']

        # –¢–µ–ø–µ—Ä—å filters_storage —Ç–æ—á–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
        if not isinstance(filters_storage, dict): # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            logger.error(f"handle_text_input: filters_storage –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(filters_storage)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {filters_storage}")
            await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            context.user_data.pop('awaiting_input', None) # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
        awaiting_input_type = context.user_data.pop('awaiting_input', None) # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ *–ø–æ—Å–ª–µ* –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è filters_storage
        
        if awaiting_input_type == 'counterparty':
            filters_storage['counterparty'] = text
            logger.debug(f"handle_text_input: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä 'counterparty' = '{text}'")
        elif awaiting_input_type == 'check_num':
            filters_storage['check_num'] = text
            logger.debug(f"handle_text_input: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä 'check_num' = '{text}'")
        # --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö ---
        elif awaiting_input_type == 'description':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            filters_storage['description'] = text
            logger.debug(f"handle_text_input: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä 'description' = '{text}'")
        # -------------------------
        elif awaiting_input_type:
            # –ï—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_input, –Ω–æ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
             logger.warning(f"handle_text_input: –ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ awaiting_input_type: '{awaiting_input_type}' —Å —Ç–µ–∫—Å—Ç–æ–º '{text}'")
             # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å
             return # –í–∞–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è

        else:
            # –ï—Å–ª–∏ –º—ã –Ω–µ –æ–∂–∏–¥–∞–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç/—á–µ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ)
            # –∏ —ç—Ç–æ –Ω–µ –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ),
            # –∏ —ç—Ç–æ –Ω–µ –≤–≤–æ–¥ ID (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ),
            # —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.
            logger.warning(f"handle_text_input: –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: '{text}' –æ—Ç user_id {user_id} –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ awaiting_input.")
            # –ü–æ–∫–∞ –Ω–µ –±—É–¥–µ–º –Ω–∏—á–µ–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –ø–æ—Ç–æ–∫–∞–º.
            return # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è show_filters_menu –±–µ–∑ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏

        # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç, —á–µ–∫ #, –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ),
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await show_filters_menu(update, context, edit_mode=edit_mode_active)


    async def handle_import_id_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä import_id –∏–∑ –º–µ–Ω—é"""
            query = update.callback_query
            await query.answer()

            callback_data = query.data
            logger.debug(f"handle_import_id_callback: –ü–æ–ª—É—á–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π callback_data: '{callback_data}'")

            selected_import_id = '–í—Å–µ' # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if callback_data == 'import_id_–í—Å–µ':
                selected_import_id = '–í—Å–µ'
            elif callback_data.startswith('import_id_'):
                id_str = callback_data[len('import_id_'):]
                logger.debug(f"handle_import_id_callback: –ò–∑–≤–ª–µ—á–µ–Ω id_str = '{id_str}', —Ç–∏–ø = {type(id_str)}")

                try:
                    selected_import_id = int(id_str)
                except ValueError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É '{id_str}' –≤ —á–∏—Å–ª–æ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é '–í—Å–µ'.")
                    selected_import_id = '–í—Å–µ'
            else:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π callback_data –¥–ª—è import_id: '{callback_data}'. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é '–í—Å–µ'.")
                selected_import_id = '–í—Å–µ'

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            edit_mode_active = context.user_data.get('edit_mode') and context.user_data['edit_mode'].get('type') == 'edit_by_filter'
            if edit_mode_active:
                filters_storage = context.user_data['edit_mode'].setdefault('edit_filters', get_default_filters())
            else:
                filters_storage = context.user_data.setdefault('export_filters', get_default_filters())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ import_id
            filters_storage['import_id'] = selected_import_id
            logger.debug(f"handle_import_id_callback: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω import_id –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö: {filters_storage['import_id']}")

            # --- –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ ID –∏–º–ø–æ—Ä—Ç–∞ ---
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID (–Ω–µ "–í—Å–µ"), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–≤–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            if filters_storage['import_id'] != '–í—Å–µ':
                past_start_date = datetime(2000, 1, 1) # –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —è–Ω–≤–∞—Ä—è 2000)
                filters_storage['start_date'] = past_start_date.strftime('%d.%m.%Y')
                logger.debug(f"handle_import_id_callback: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {filters_storage['start_date']} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ ID –∏–º–ø–æ—Ä—Ç–∞.")
            # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–û ---

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
            try:
                await show_filters_menu(update, context, edit_mode=edit_mode_active)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ show_filters_menu: {e}", exc_info=True)
                await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é. –§–∏–ª—å—Ç—Ä ID –∏–º–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    
                    
    @admin_only
    async def add_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        args = context.args
        if not args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/add_settings –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: –û–ê–≠ 2025\n"
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                "/add_settings\n"
                "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ 2025\n"
                "–ß–µ–∫: + —Å–≤–æ–π —Ç–µ–∫—Å—Ç"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        full_text = update.message.text[len('/add_settings'):].strip()

        # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        settings = parse_settings_from_text(full_text)

        if not settings:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['processing_settings'] = settings

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        response = "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        for key, value in settings.items():
            response += f"{key}: {value['value']}\n"

        await update.message.reply_text(response)

    @admin_only
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings = context.user_data.get('processing_settings', {})
        
        if not settings:
            await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return
        
        response = "‚öô –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        for key, value in settings.items():
            response += f"{key}: {value['value']}\n"
        
        await update.message.reply_text(response)

    @admin_only
    async def reset_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        context.user_data.pop('processing_settings', None)
        await update.message.reply_text("‚öô –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")


    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        user_data = context.user_data
        message_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = parse_settings_from_text(message_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['processing_settings'] = settings
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        response = "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        for key, value in settings.items():
            response += f"{key}: {value['value']}\n"
        
        response += "\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        await update.message.reply_text(response)


    async def view_logs_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–æ–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            log_dir = os.path.join(os.path.dirname(__file__), 'logs')
            if not os.path.exists(log_dir):
                await query.edit_message_text("–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
            log_files = sorted([
                f for f in os.listdir(log_dir) 
                if f.endswith('.log') and os.path.isfile(os.path.join(log_dir, f))
            ], reverse=True)
            
            if not log_files:
                await query.edit_message_text("–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –º–µ–Ω—é (–Ω–µ –±–æ–ª–µ–µ 20)
            log_files = log_files[:20]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤
            keyboard = [
                [InlineKeyboardButton(f, callback_data=f'logfile_{f}')]
                for f in log_files
            ]
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=reply_markup
                )
            except telegram.error.BadRequest as e:
                if "not modified" in str(e):
                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É")
                else:
                    raise
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ª–æ–≥–æ–≤: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤")

    @admin_only
    async def cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        if 'adding_pattern' in context.user_data:
            del context.user_data['adding_pattern']
            self.application.remove_handler(self.pattern_handler)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        elif 'editing_file' in context.user_data:
            self.remove_config_handlers()
            del context.user_data['editing_file']
            await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")


    async def handle_pattern_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ callback_data
        safe_category = query.data.replace('addpat_', '')
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        from classify_transactions_pdf import load_config
        config = load_config()

        full_category = None
        for cat in config['categories']:
            if cat['name'].replace(" ", "_")[:30] == safe_category:
                full_category = cat['name']
                break
        
        if not full_category:
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        context.user_data['adding_pattern'] = {
            'category': full_category,
            'message': await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {full_category}\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ).\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_pattern_input
        ))


    def safe_calendar_pattern_wrapper(self, original_pattern_callable):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è AttributeErrors."""
        def wrapper(data: str) -> bool:
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                return original_pattern_callable(data)
            except AttributeError as e:
                # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É, —É–∫–∞–∑—ã–≤–∞—é—â—É—é –Ω–∞ —Å—Ç—Ä–æ–∫—É –±–µ–∑ .data
                if "'str' object has no attribute 'data'" in str(e):
                    return False # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–∞—Ç—Ç–µ—Ä–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                # –ü–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ AttributeErrors
                raise
            # –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º TypeError –∏ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        return wrapper


    async def handle_pattern_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if 'adding_pattern' not in context.user_data:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")
            return
        
        pattern = update.message.text
        category = context.user_data['adding_pattern']['category']
        
        try:
            from classify_transactions_pdf import add_pattern_to_category
            add_pattern_to_category(category, pattern)
            
            await update.message.reply_text(
                f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {str(e)}"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if 'adding_pattern' in context.user_data:
                del context.user_data['adding_pattern']
            self.application.remove_handler(self.pattern_handler)

    @admin_only
    async def add_pattern(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏: /add_pattern, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–∞—Ç—Ç–µ—Ä–Ω
            args = update.message.text.split(maxsplit=2)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–∫–æ–º–∞–Ω–¥–∞ + 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞)
            if len(args) != 3:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_pattern \"–ö–∞—Ç–µ–≥–æ—Ä–∏—è\" \"–ü–∞—Ç—Ç–µ—Ä–Ω\"\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /add_pattern \"–ï–¥–∞\" \"VKUSVILL\""
                )
                return
                
            category = args[1]  # "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ"
            pattern = args[2]   # "VET UNION"

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–±–µ–ª—ã
            # try:
            #     category = ' '.join(args[:-1]).strip('"\'')
            #     pattern = args[-1].strip('"\'')

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            from classify_transactions_pdf import add_pattern_to_category
            add_pattern_to_category(category, pattern)
            
            await update.message.reply_text(f"–ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {str(e)}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return


    async def add_pattern_interactive(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        from classify_transactions_pdf import load_config
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ callback_data
        categories = []
        for cat in config['categories']:
            name = cat['name']
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É
            safe_name = name.replace(" ", "_")[:30]  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤
            categories.append((name, f'addpat_{safe_name}'))
        
        if not categories:
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton(name, callback_data=callback_data)]
            for name, callback_data in categories
        ]
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞:",
                reply_markup=reply_markup
            )
        except telegram.error.BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        context.user_data['next_step'] = 'await_pattern'

         
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        error = context.error
        logger.error("–û—à–∏–±–∫–∞: %s, update: %s", error, update, exc_info=True)

        if isinstance(error, telegram.error.Forbidden):
            logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        elif isinstance(error, telegram.error.BadRequest):
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: {error}")
            if isinstance(update, Update) and update.callback_query:
                try:
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                except:
                    pass
            return
        
        logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)
        if isinstance(update, Update) and update.callback_query:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    # –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @admin_only
    @admin_only
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–Ø –ø–æ–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF-–≤—ã–ø–∏—Å–∫–∏ –∏–∑ –±–∞–Ω–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "<b>–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:</b>\n"
            "1. üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª</b> —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–æ–π.\n"
            "2. üíæ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
            "3. üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä—É—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –±—É–¥—É—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ.\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /export - –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ CSV —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É—è –≥–∏–±–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã.\n"
            "‚Ä¢ /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "‚Ä¢ /date_ranges - –ü–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É PDF –≤ –±–∞–∑–µ.\n"
            "‚Ä¢ /config - –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞.\n"
            "‚Ä¢ <code>/add_pattern \"–ö–∞—Ç–µ–≥–æ—Ä–∏—è\" \"–ü–∞—Ç—Ç–µ—Ä–Ω\"</code> - –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/add_pattern \"–ü—Ä–æ–¥—É–∫—Ç—ã\" \"–ê–ó–ë–£–ö–ê –í–ö–£–°–ê\"</code>).\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF:</b>\n"
            "–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π PDF-—Ñ–∞–π–ª–∞ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add_settings) –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "   <code>–û–ø–∏—Å–∞–Ω–∏–µ: +–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ –°–ü–±</code> (–¥–æ–±–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞)\n"
            "   <code>PDF: 1</code> (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏)\n"
            "   <code>–ö–ª–∞—Å—Å: –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã</code> (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
            "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n"
            "‚Ä¢ /add_settings - –ó–∞–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "‚Ä¢ /show_settings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "‚Ä¢ /reset_settings - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
            "‚è≥ <i>–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</i>\n"
            "‚ú® –£—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Ç–æ—á–Ω–æ–≥–æ —É—á–µ—Ç–∞!"            
        )
         
        await update.message.reply_text(welcome_text, parse_mode='HTML')
 

    async def main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'view_config':
            await self.show_config_selection(update, context)
        elif query.data == 'edit_config':
            await self.show_edit_menu(update, context)
        elif query.data == 'view_logs':
            await self.view_logs_callback(update, context)
        elif query.data == 'restart':
            await self.restart_bot(update, context)


    async def send_config_files(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        config_dir = os.path.join(os.path.dirname(__file__), 'config')
        # config_dir = '/app/config'
        
        config_files = {
            'categories.yaml': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            'special_conditions.yaml': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
            'timeouts.yaml': '–¢–∞–π–º–∞—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        }
        
        for filename, description in config_files.items():
            filepath = os.path.join(config_dir, filename)
            if os.path.exists(filepath):
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(content) > 4000:
                        parts = [content[i:i+4000] for i in range(0, len(content), 4000)]
                        for part in parts:
                            await query.message.reply_text(f"`{part}`", parse_mode='Markdown')
                            await asyncio.sleep(0.5)
                    else:
                        await query.message.reply_text(f"*{description}*:\n`{content}`", 
                                                    parse_mode='Markdown')
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
                    await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {filename}")
            else:
                await query.message.reply_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                

    def remove_config_handlers(self):
        """–£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
        logger.info("remove_config_handlers: –£–¥–∞–ª—è—é config_handlers –∏–∑ –≥—Ä—É–ø–ø—ã -1.")
        for handler_obj in self.config_handlers: # handler_obj
            handler_name = "handle_config_edit" if handler_obj.callback == self.handle_config_edit else "handle_config_upload"
            logger.debug(f"remove_config_handlers: –£–¥–∞–ª—è—é config_handler ({handler_name}) —Å ID: {id(handler_obj)} –∏–∑ –≥—Ä—É–ø–ø—ã -1.")
            self.application.remove_handler(handler_obj, group=-1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_data = context.user_data
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = user_data.get('processing_settings', {})
        return_files = settings.get('pdf', {'value': '0'})['value']
        if return_files not in ('0', '1', '2'):
            return_files = '0'
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PDF: {return_files}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '0'")
        
        # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        user_data.pop('processing_settings', None)
        
        document = update.message.document
        if not document.file_name.lower().endswith('.pdf'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            return

        if document.file_size > 10 * 1024 * 1024:  # 10 MB
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.")
            return

        # logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {document.file_name}")
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        # logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {document.file_name}, —Ä–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç")
        logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {document.file_name}, —Ä–∞–∑–º–µ—Ä: {round(document.file_size / (1024 * 1024), 2)} –ú–ë")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: return_files={return_files}")

        tmp_pdf_path = temp_csv_path = combined_csv_path = result_csv_path = unclassified_csv_path = None

        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF
            pdf_file = BytesIO()
            file = await document.get_file()
            await file.download_to_memory(out=pdf_file)
            pdf_file.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

            with NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_pdf:
                tmp_pdf.write(pdf_file.getbuffer())
                tmp_pdf_path = tmp_pdf.name

            temp_csv_path, pdf_type = await asyncio.to_thread(extract_pdf1, tmp_pdf_path)
            combined_csv_path = await asyncio.to_thread(extract_pdf2, temp_csv_path, pdf_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –û–ë–ê –ø—É—Ç–∏
            result_csv_path, unclassified_csv_path = await asyncio.to_thread(
                classify_transactions, combined_csv_path, pdf_type, user_settings=settings
            )

            df = pd.read_csv(
                result_csv_path,
                sep=';',          # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                quotechar='"',     # –°–∏–º–≤–æ–ª –∫–∞–≤—ã—á–µ–∫
                encoding='utf-8',  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
                on_bad_lines='warn' # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                )

            context.user_data['pending_data'] = {
                'df': df,
                'pdf_type': pdf_type,
                'timestamp': time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            files_to_send = []
            
            if return_files == '1':
                files_to_send.append(temp_csv_path)
            elif return_files == '2':
                files_to_send.extend([temp_csv_path, combined_csv_path])
            else:  # default - —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
                files_to_send.append(result_csv_path)
                # –î–æ–±–∞–≤–ª—è–µ–º unclassified —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                if unclassified_csv_path and os.path.exists(unclassified_csv_path):
                    unclassified_df = pd.read_csv(unclassified_csv_path)
                    unclassified_caption = f"‚úçÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\nüóÇÔ∏è –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(unclassified_df)}"
                    with open(unclassified_csv_path, 'rb') as f:
                        await update.message.reply_document(document=f, caption=unclassified_caption)                    
                    # files_to_send.append(unclassified_csv_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file_path in files_to_send:
                if file_path and os.path.exists(file_path):
                    caption = "‚úçÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏" if file_path == unclassified_csv_path else None
                    with open(file_path, 'rb') as f:
                        file_caption = f"üóÉÔ∏è –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}"
                        if caption:
                            file_caption = f"{caption}\n{file_caption}"
                        await update.message.reply_document(document=f, caption=file_caption)                        

            context.user_data['temp_files'] = [
                tmp_pdf_path,
                temp_csv_path,
                combined_csv_path,
                result_csv_path,
                unclassified_csv_path
            ]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data='save_yes'),
                InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data='save_no')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            await update.message.reply_text(
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞\n"
                "2. –§–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                "3. –§–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º (Tinkoff, –°–±–µ—Ä–±–∞–Ω–∫, –Ø–Ω–¥–µ–∫—Å)"
            )
            # –£–¥–∞–ª—è–µ–º pending_data –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'pending_data' in context.user_data:
                del context.user_data['pending_data']

        finally:
            if pdf_file:
                pdf_file.close()
            if tmp_pdf:
                tmp_pdf.close()


    async def handle_save_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        query = update.callback_query
        await query.answer()
        
        user_data = context.user_data
        
        if query.data == 'save_no':
            await query.edit_message_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            if 'temp_files' in user_data:
                await cleanup_files(user_data['temp_files'])
                del user_data['temp_files']
            
            if 'pending_data' in user_data:
                del user_data['pending_data']
            return
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–î–∞" –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        pending_data = user_data.get('pending_data', {})
        pdf_type_to_save = pending_data.get('pdf_type')

        user_id = update.effective_user.id
        df = context.user_data['pending_data']['df']
        # pdf_type = context.user_data['pending_data']['pdf_type']


        # if not pending_data or 'timestamp' not in pending_data or 'df' not in pending_data:
        if not pending_data or 'df' not in pending_data or 'pdf_type' not in pending_data:
            await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã (DataFrame –∏–ª–∏ pdf_type –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)")
            return
            
        if time.time() - pending_data['timestamp'] > 300:
            await query.edit_message_text("‚è≥ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)")
            return

        logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: %s", pending_data['df'][['–î–∞—Ç–∞']].head().to_dict())
        db = None
        try:
            db = DBConnection()
            stats = save_transactions(df, user_id=user_id, pdf_type=pdf_type_to_save, db=db)
            db.close()
            
            logger.info(
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: üÜï –Ω–æ–≤—ã—Ö - {stats['new']}, üìë –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - {stats['duplicates']}"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handle_duplicates_decision
            context.user_data['last_save_stats'] = stats

            if stats['duplicates'] > 0:
                context.user_data['pending_duplicates'] = stats['duplicates_list']
                keyboard = [
                    [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã üîÑ", callback_data='update_duplicates')],
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data='skip_duplicates')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"üîç –ù–∞–π–¥–µ–Ω–æ {stats['duplicates']} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏?",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {stats['new']} –∑–∞–ø–∏—Å–µ–π"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä PostgreSQL\n"
                "2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (DB_HOST, DB_PORT –∏ –¥—Ä.)"
            )
        finally:
            if db is not None:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                db.close()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if 'temp_files' in user_data:
                await cleanup_files(user_data['temp_files'])
                del user_data['temp_files']
            
            if 'pending_data' in user_data:
                del user_data['pending_data']


    async def handle_duplicates_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        query = update.callback_query
        await query.answer()
        
        user_data = context.user_data
        duplicates = user_data.get('pending_duplicates', [])
        stats = user_data.get('last_save_stats', {'new': 0, 'duplicates': 0, 'duplicates_list': []})

        if not duplicates:
            await query.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            user_data.pop('pending_duplicates', None)
            user_data.pop('last_save_stats', None)
            return

        if query.data == 'update_duplicates':
            try:
                updated = 0
                with DBConnection() as db:
                    for row in duplicates:
                        # –ù–∞—Ö–æ–¥–∏–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥—É–±–ª–∏–∫–∞—Ç–∞
                        with db.cursor(dict_cursor=True) as cur:
                            cur.execute("""
                                SELECT id FROM transactions 
                                WHERE transaction_date = %s 
                                AND amount = %s 
                                AND cash_source = %s
                            """, (row['–¥–∞—Ç–∞'], row['—Å—É–º–º–∞'], row.get('–Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å')))
                            result = cur.fetchone()
                            if result:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID
                                updates = {'category': (row.get('–∫–∞—Ç–µ–≥–æ—Ä–∏—è', None), 'replace')}
                                updated_ids = apply_edits(
                                    user_id=query.from_user.id,
                                    ids=[result['id']],
                                    updates=updates,
                                    db=db
                                )
                                if updated_ids:
                                    updated += 1
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                await query.edit_message_text(
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –∑–∞–ø–∏—Å–µ–π\n"
                    f"üÜï –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ: {stats['new']} –∑–∞–ø–∏—Å–µ–π"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
        elif query.data == 'skip_duplicates':
            response = (
                f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã: {stats['duplicates']}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['new']}"
            )
            if stats['new'] == 0:
                response = (
                    f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã: {stats['duplicates']}\n"
                    f"‚ÑπÔ∏è –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                )
            
            await query.edit_message_text(response)
        
        user_data.pop('pending_duplicates', None)
        user_data.pop('last_save_stats', None)



    async def handle_logfile_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã logfile_, logview_file_, logview_text_
        filename = re.sub(r'^(?:logfile_|logview_file_|logview_text_)', '', query.data)
        log_path = os.path.join(os.path.dirname(__file__), 'logs', filename)
        
        if not os.path.exists(log_path):
            await query.edit_message_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = [
            [
                InlineKeyboardButton(text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {self.log_lines_to_show} —Å—Ç—Ä–æ–∫",callback_data=f'logview_text_{filename}'),
                InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f'logview_file_{filename}')
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º", callback_data='view_logs')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                text=f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {filename}\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏?",
                reply_markup=reply_markup
            )
        except telegram.error.BadRequest as e:
            if "not modified" in str(e):
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    async def handle_log_view_option(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫:
        ‚Äî logview_text_<filename>  ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞;
        ‚Äî logview_file_<filename>  ‚Äî —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞.
        –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.
        """
        query = update.callback_query
        await query.answer()

        # 1) –†–∞–∑–±–æ—Ä callback_data: action –∏ –∏–º—è —Ñ–∞–π–ª–∞
        data = query.data.removeprefix('logview_')
        try:
            action, filename = data.split('_', 1)
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: {query.data}")
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")
            return

        # 2) –ü—É—Ç—å –¥–æ –ª–æ–≥–∞ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä
        log_path = os.path.join(os.path.dirname(__file__), 'logs', filename)
        if not os.path.exists(log_path):
            await query.edit_message_text(f"–§–∞–π–ª `{filename}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='Markdown')
            return
        file_size = os.path.getsize(log_path)

        # 3) –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é
        try:
            await query.message.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—é: {e}")

        # 4) –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
        if action == 'text':
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if file_size > 5 * 1024 * 1024:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–§–∞–π–ª –ª–æ–≥–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>5 MB) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º."
                )
                return

            # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
            try:
                with open(log_path, 'r', encoding='utf-8', errors='replace') as f:
                    lines = f.readlines()[-self.log_lines_to_show:]
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ `{filename}`."
                )
                return

            content = ''.join(lines)
            content = sanitize_log_content(content)

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            for part in (content[i:i+4000] for i in range(0, len(content), 4000)):
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {self.log_lines_to_show} —Å—Ç—Ä–æ–∫ –∏–∑ `{filename}`:\n<pre>{part}</pre>",
                        parse_mode='HTML'
                    )
                except Exception:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {self.log_lines_to_show} —Å—Ç—Ä–æ–∫ –∏–∑ {filename}:\n{part}"
                    )
                await asyncio.sleep(0.3)
            return

        # 5) –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if action == 'file':
            try:
                with open(log_path, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=f,
                        filename=filename,
                        caption=f"–ü–æ–ª–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª: {filename}"
                    )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ `{filename}`."
                )
            return

        # 6) –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ {action} –≤ callback_data")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        )


    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞
    @admin_only
    async def restart_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º query –∏–∑ update
            query = update.callback_query if hasattr(update, 'callback_query') else None
            
            if query:
                try:
                    await query.answer()
                    await query.edit_message_text(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                except telegram.error.BadRequest as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if update.message:
                    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            asyncio.create_task(self.delayed_restart())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            if query:
                try:
                    await query.edit_message_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
                except telegram.error.BadRequest:
                    pass

    async def delayed_restart(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self._is_restarting:
            return
        self._is_restarting = True
        
        try:
            logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...")
            if self._in_docker:
                logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤ Docker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'docker restart'.")
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if self.application.updater and self.application.updater.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
                await self.application.updater.stop()
                await asyncio.sleep(1)
                
            if self.application.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application...")
                await self.application.stop()
                await asyncio.sleep(1)
                
                logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É application...")
                await self.application.shutdown()
                await asyncio.sleep(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (—Ç–æ–ª—å–∫–æ –≤–Ω–µ Docker)
            TOKEN = TELEGRAM_BOT_TOKEN
            if not TOKEN:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                return
            
            logger.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
            os.execv(sys.executable, [sys.executable, __file__])
            
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
            await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            os._exit(0)

            await asyncio.wait_for(self.application.shutdown(), timeout=10)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            os._exit(1)

        finally:
            self._is_restarting = False


    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
            await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            
            if self.application.updater and self.application.updater.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
                await self.application.updater.stop()
                await asyncio.sleep(1)
                
            if self.application.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application...")
                await self.application.stop()
                await asyncio.sleep(1)
                
                logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É application...")
                await self.application.shutdown()
                await asyncio.sleep(1)
            
            logger.info("–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            raise

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç—É."""
        if self._is_running:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
            return
            
        self._is_running = True
        
        if self._in_docker:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        try:
            logger.debug("!!!!!!!!!!!!!!!!! RUN_POLLING –°–¢–ê–†–¢–£–ï–¢ !!!!!!!!!!!!!!!!!") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
            self.application.run_polling(
                poll_interval=2.0,
                timeout=self.request_timeout,
                # close_loop=False, # –≠—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
                stop_signals=None # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∏–∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç –µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ exc_info
           
def docker_healthcheck():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è Docker healthcheck."""
    try:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        return True
    except Exception:
        return False

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—É—Å–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = TELEGRAM_BOT_TOKEN
    if not TOKEN:
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        sys.exit(1)
    
    try:
        bot = TransactionProcessorBot(TOKEN)
        # logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)