__version__ = "3.4.0"

import os
import logging
from logging.handlers import TimedRotatingFileHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)
from io import BytesIO
import pandas as pd
from typing import Dict
from tempfile import NamedTemporaryFile
import asyncio
import time
import yaml
import socket
import sys
import subprocess
import shlex
import telegram
import re
from database import Database
from datetime import datetime, timedelta
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from telegram.ext.filters import BaseFilter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    date_format = '%d-%m-%Y %H:%M:%S' #%z'
    
    # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(logging.Formatter(log_format, date_format))
    
    # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try:
        if not os.path.exists('logs'):
            os.makedirs('logs')
    except OSError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤: {e}")

    file_handler = TimedRotatingFileHandler(
        'logs/bot.log',
        when='midnight',
        backupCount=30,
        encoding='utf-8'
    )
    
    file_handler.suffix = "%Y-%m-%d_bot.log"
    file_handler.extMatch = re.compile(r"^\d{4}-\d{2}-\d{2}_bot\.log$")
    file_handler.setFormatter(logging.Formatter(log_format, date_format))
       
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()

    # –ß–∏—Ç–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO
    log_level_str = os.getenv('LOG_LEVEL', 'INFO').upper()
    log_level_mapping = {
        'CRITICAL': logging.CRITICAL,
        'ERROR': logging.ERROR,
        'WARNING': logging.WARNING,
        'INFO': logging.INFO,
        'DEBUG': logging.DEBUG,
        'NOTSET': logging.NOTSET
    }
    log_level = log_level_mapping.get(log_level_str, logging.INFO) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º INFO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ
    logger.setLevel(log_level)

    logger.addHandler(console_handler)
    logger.addHandler(file_handler)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    logging.getLogger('httpx').setLevel(logging.WARNING)  # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏ httpx
    logging.getLogger('telegram').setLevel(logging.INFO)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏ telegram
    # logging.getLogger("telegram").setLevel(logging.DEBUG) # –î–æ–±–∞–≤–ª–µ–Ω–æ

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è BOT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {logging.getLevelName(logger.level)}")

    return logger

logger = setup_logging()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    admins = os.getenv('ADMINS', '').split(',')
    return set(map(int, filter(None, admins)))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ set[int]

ALLOWED_USERS = load_admins()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def admin_only(func):
    async def wrapper(*args, **kwargs):
        # ... (–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è update)
        # update = args[1] if len(args) >= 2 else (kwargs.get('update') or args[0]) # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º update –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞)
        if len(args) >= 2 and isinstance(args[1], Update): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
            update = args[1]
        elif len(args) >= 1 and isinstance(args[0], Update): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
             update = args[0]
        elif 'update' in kwargs and isinstance(kwargs['update'], Update):
            update = kwargs['update']
        else: # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ Update, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–≤—ã–π –∏–ª–∏ –Ω–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
            found_update = next((arg for arg in args if isinstance(arg, Update)), None)
            if not found_update:
                 logger.error("admin_only: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç Update –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")
                 # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
                 return await func(*args, **kwargs) # –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞
            update = found_update

        if not update or not hasattr(update, 'effective_user') or not update.effective_user:
            logger.error("admin_only: –û–±—ä–µ–∫—Ç Update –∏–ª–∏ effective_user –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            # –†–µ—à–∏—Ç–µ, –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø
            return await func(*args, **kwargs) # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        user_id = update.effective_user.id
        logger.debug(f"admin_only: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è user_id: {user_id}. –í—Ö–æ–¥–∏—Ç –≤ ALLOWED_USERS: {user_id in ALLOWED_USERS}") # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –õ–û–ì

        if user_id not in ALLOWED_USERS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                logger.debug(f"admin_only: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}") # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –õ–û–ì
            return
        return await func(*args, **kwargs)
    return wrapper

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—É—Å–∫
try:
    lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    lock_socket.bind('\0' + 'transaction_bot_lock')  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
except socket.error:
    print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
from extract_transactions_pdf1 import process_pdf as extract_pdf1
from extract_transactions_pdf2 import process_csv as extract_pdf2
from classify_transactions_pdf import (classify_transactions, add_pattern_to_category)

def load_timeouts(config_path: str = None) -> Dict[str, int]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏–∑ YAML-—Ñ–∞–π–ª–∞"""
    if config_path is None:
        config_path = os.path.join(os.path.dirname(__file__), 'config', 'timeouts.yaml')
    with open(config_path, 'r', encoding='utf-8') as file:
        return yaml.safe_load(file)['timeouts']

def parse_user_settings(message_text: str) -> dict:
    settings = {}
    if not message_text:
        return settings
    
    # lines = [line.strip() for line in message_text.split('\n') if line.strip()]
    lines = [line.strip() for line in message_text.split('\n')[:100] if line and len(line) < 100]
    pattern = re.compile(r"^(.+?)\s*:\s*(\+?)\s*(.*)$", re.IGNORECASE)
    
    for line in lines:
        match = pattern.match(line)
        if match:
            key = match.group(1).strip().lower()
            operator = match.group(2).strip()
            value = match.group(3).strip()
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
            if key in ['–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞']:
                key = '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'
            elif key in ['—á–µ–∫', '—á–µ–∫ #', '—á–µ–∫‚Ññ']:
                key = '–ß–µ–∫ #'
            elif key in ['–æ–ø–∏—Å–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–∏']:
                key = '–û–ø–∏—Å–∞–Ω–∏–µ'
            elif key in ['–Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å', '–Ω–∞–ª', '–Ω–∞–ª–∏—á–∫–∞']:
                key = '–ù–∞–ª–∏—á–Ω–æ—Å—Ç—å'
            elif key in ['–∫–ª–∞—Å—Å']:
                key = '–ö–ª–∞—Å—Å'
                
            settings[key] = {
                'operator': operator,
                'value': value
            }
    
    return settings

class TransactionProcessorBot:
    def __init__(self, token: str):
        self._active_tasks = 0
        self._max_active_tasks = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞

        self._is_running = False
        self._is_restarting = False  # –§–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏  
        self._in_docker = os.getenv('DOCKER_MODE') is not None

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        self.config_handlers = [
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_config_edit),
            MessageHandler(filters.Document.ALL, self.handle_config_upload)
        ]

        # –õ–æ–≥–∏—Ä—É–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for i, handler_obj in enumerate(self.config_handlers):
            handler_name = "handle_config_edit" if i == 0 else "handle_config_upload"
            logger.debug(f"__init__: –°–æ–∑–¥–∞–Ω config_handler ({handler_name}) —Å ID: {id(handler_obj)}")

        if not self._in_docker:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–Ω–µ Docker
            try:
                lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
                lock_socket.bind('\0' + 'transaction_bot_lock')
            except socket.error:
                print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
                sys.exit(1)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        timeouts = load_timeouts()
        self.download_timeout = timeouts['download_timeout']
        self.processing_timeout = timeouts['processing_timeout']
        self.request_timeout = timeouts['request_timeout']
        self.delay_between_operations = timeouts['delay_between_operations']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Application
        self.application = Application.builder() \
            .token(token) \
            .read_timeout(self.request_timeout) \
            .write_timeout(self.request_timeout) \
            .build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        # self.application.add_handler(CallbackQueryHandler(
        #     self.config_selection_callback,
        #     pattern='^(view_categories|view_special|view_pdf_patterns|view_timeouts|view_all|back_to_main)$'
        # ))

        self.application.add_handler(CallbackQueryHandler(
            self.config_selection_callback,
            pattern=re.compile(r'^(view_categories|view_special|view_pdf_patterns|view_timeouts|view_all|back_to_main)$')
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        self.pattern_handler = MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_pattern_input
        )

    def setup_handlers(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("config", self.show_config_menu))
        self.application.add_handler(CommandHandler("restart", self.restart_bot))
        self.application.add_handler(CommandHandler("add_pattern", self.add_pattern))
        self.application.add_handler(CommandHandler("add_settings", self.add_settings))
        self.application.add_handler(CommandHandler("settings", self.show_settings))
        self.application.add_handler(CommandHandler("export", self.export_start))
        self.application.add_handler(CommandHandler("reset", self.reset_settings))

        # self.application.add_handler(CallbackQueryHandler(self.set_filter, pattern='^set_'))
        # self.application.add_handler(CallbackQueryHandler(self.handle_calendar_callback, pattern=r"^calendar:"),group=0)
        self.application.add_handler(CallbackQueryHandler(self.handle_calendar_callback, pattern=r"^cbcal_"),group=0)
        self.application.add_handler(CallbackQueryHandler(self.generate_report, pattern='^generate_report'))
        self.application.add_handler(CallbackQueryHandler(self.show_filters_menu, pattern='^back_to_filters'))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_config_edit),group=-1)
        self.application.add_handler(CallbackQueryHandler(self.handle_filter_callback, pattern='^(cat|type|source|class)_'))
        self.application.add_handler(CallbackQueryHandler(self.set_start_date, pattern='^set_start_date$'))
        self.application.add_handler(CallbackQueryHandler(self.set_end_date, pattern='^set_end_date$'))     
        self.application.add_handler(CallbackQueryHandler(self.set_category, pattern='^set_category$'))
        self.application.add_handler(CallbackQueryHandler(self.set_type, pattern='^set_type$'))
        self.application.add_handler(CallbackQueryHandler(self.set_cash_source, pattern='^set_cash_source'))
        self.application.add_handler(CallbackQueryHandler(self.set_counterparty, pattern='^set_counterparty'))
        self.application.add_handler(CallbackQueryHandler(self.set_check_num, pattern='^set_check_num'))
        self.application.add_handler(CallbackQueryHandler(self.set_class, pattern='^set_class'))
        self.application.add_handler(CallbackQueryHandler(self.cancel_export, pattern='^cancel_export$'))
        self.application.add_handler(CallbackQueryHandler(self.debug_callback, pattern='.*'))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤ –∫–ª–∞—Å—Å–µ
        # –û–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–µ—Ä–≤—ã–º–∏.
        # self.application.add_handler(
        #     CallbackQueryHandler(
        #         self.handle_calendar_callback,
        #         pattern=self.safe_calendar_pattern_wrapper(DetailedTelegramCalendar.func())
        #     ),
        #     group=1
        # )

        # self.application.add_handler(CallbackQueryHandler(self.handle_calendar_callback, pattern=r"^calendar:"),group=0)

        self.application.add_handler(MessageHandler(
            filters.Document.ALL,
            self.handle_document
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        self.application.add_handler(
            CallbackQueryHandler(
                self.main_menu_callback,
                pattern='^(view_config|edit_config|restart|view_logs)$'
            )
        )
        
        self.application.add_handler(
            CallbackQueryHandler(
                self.edit_menu_callback,
                pattern='^(edit_categories|edit_special|edit_pdf_patterns|edit_timeouts|cancel)$'
            )
        )
        
        self.application.add_handler(
            CallbackQueryHandler(
                self.handle_pattern_callback,
                pattern='^addpat_'
            )
        )
        
        self.application.add_handler(
            CallbackQueryHandler(
                self.add_pattern_interactive,
                pattern='^add_pattern_interactive$'
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        self.application.add_handler(
            CallbackQueryHandler(
                self.handle_logfile_selection,
                pattern='^logfile_'
            )
        )
        
        self.application.add_handler(
            CallbackQueryHandler(
                self.handle_log_view_option,
                pattern='^logview_'
            )
        )

        self.application.add_handler(CallbackQueryHandler(
        self.handle_save_confirmation,
        pattern='^save_(yes|no)$'
        ))

        self.application.add_handler(
            CallbackQueryHandler(
                self.handle_duplicates_decision,
                pattern='^(update_duplicates|skip_duplicates)$'
            )
        )

        self.application.add_handler(CommandHandler("cancel", self.cancel_operation))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    @admin_only
    async def show_filters_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
        user_data = context.user_data
        filters = user_data['export_filters']
        
        keyboard = [
            [InlineKeyboardButton(f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {filters['start_date']}", callback_data='set_start_date')],
            [InlineKeyboardButton(f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {filters['end_date']}", callback_data='set_end_date')],
            [InlineKeyboardButton(f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {filters['category']}", callback_data='set_category')],
            [InlineKeyboardButton(f"üîÄ –¢–∏–ø: {filters['transaction_type']}", callback_data='set_type')],
            [InlineKeyboardButton(f"üí≥ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å: {filters['cash_source']}", callback_data='set_cash_source')],
            [InlineKeyboardButton(f"üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {filters['counterparty']}", callback_data='set_counterparty')],
            [InlineKeyboardButton(f"üßæ –ß–µ–∫: {filters['check_num']}", callback_data='set_check_num')],
            [InlineKeyboardButton(f"üìä –ö–ª–∞—Å—Å: {filters['transaction_class']}", callback_data='set_class')],
            [InlineKeyboardButton("‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data='generate_report')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_export')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "‚öô –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚öô –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:",
                reply_markup=reply_markup
            )

    @admin_only
    async def export_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        user_data = context.user_data
        user_data['export_filters'] = {
            'start_date': datetime.now().replace(day=1).strftime('%d.%m.%Y'),
            'end_date': datetime.now().strftime('%d.%m.%Y'),
            'category': '–í—Å–µ',
            'transaction_type': '–í—Å–µ',
            'cash_source': '–í—Å–µ',
            'counterparty': '–í—Å–µ',
            'check_num': '–í—Å–µ',
            'transaction_class': '–í—Å–µ'
            }
        
        await self.show_filters_menu(update, context)

    @admin_only
    async def set_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
        logger.debug("–í—ã–∑–æ–≤ set_start_date –¥–ª—è user_id=%s", update.effective_user.id)
        query = update.callback_query
        await query.answer()
        calendar, step = DetailedTelegramCalendar().build()
        await query.message.reply_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ ({LSTEP[step]}):",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º LSTEP –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ (–≥–æ–¥/–º–µ—Å—è—Ü/–¥–µ–Ω—å)
            reply_markup=calendar
        )
        context.user_data["calendar_context"] = "start_date" 

    @admin_only
    async def set_end_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info("–í—ã–∑–æ–≤ set_end_date –¥–ª—è user_id=%s", update.effective_user.id)
        query = update.callback_query
        await query.answer()
        calendar, step = DetailedTelegramCalendar().build()
        await query.message.reply_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è ({LSTEP[step]}):", # –ò—Å–ø–æ–ª—å–∑—É–µ–º LSTEP –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            reply_markup=calendar
        )
        context.user_data["calendar_context"] = "end_date"

    @admin_only
    async def handle_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        logger.debug(f"Raw callback data: {update.callback_query.data}")
        logger.info(f"Calendar data received: {query.data}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {query.data}")
        await query.answer()
        result, key, step = DetailedTelegramCalendar().process(query.data)

        calendar_context = context.user_data.get("calendar_context") # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (start_date –∏–ª–∏ end_date)

        if not result and key:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥–æ–¥/–º–µ—Å—è—Ü), –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            await query.edit_message_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ {calendar_context.replace('_', ' ')} ({LSTEP[step]}):", reply_markup=key)
        elif result:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ (result - —ç—Ç–æ –æ–±—ä–µ–∫—Ç datetime.date)
            selected_date_str = result.strftime('%d.%m.%Y') # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

            if calendar_context == "start_date":
                context.user_data['export_filters']['start_date'] = selected_date_str
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: %s", selected_date_str)
            elif calendar_context == "end_date":
                context.user_data['export_filters']['end_date'] = selected_date_str
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: %s", selected_date_str)

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            if "calendar_context" in context.user_data:
                del context.user_data["calendar_context"]

            # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é)
            # await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date_str}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤, –≥–¥–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
            await self.show_filters_menu(update, context)

    @admin_only
    async def set_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_category –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id=%s", update.effective_user.id)
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        db = Database()
        try:
            categories = ['–í—Å–µ'] + db.get_unique_values("category", user_id)
            logger.info("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s", categories)

            if not categories or categories == ['–í—Å–µ']:
                try:
                    await query.edit_message_text(
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."
                    )
                except telegram.error.BadRequest as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
                    await query.message.reply_text(
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."
                    )
                return

            keyboard = []
            for cat in categories:
                safe_cat = cat.replace(" ", "_").replace("'", "").replace('"', "")[:50]
                keyboard.append([InlineKeyboardButton(cat, callback_data=f"cat_{safe_cat}")])
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            except telegram.error.BadRequest as e:
                logger.warning(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ set_category: %s", e, exc_info=True)
            try:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except telegram.error.BadRequest as e:
                logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()

    @admin_only
    async def set_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_type –≤—ã–∑–≤–∞–Ω")
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑ –±–∞–∑—ã
        user_id = query.from_user.id
        db = Database()
        types = ['–í—Å–µ'] + db.get_unique_values("transaction_type", user_id)
        db.close()

        keyboard = [
            [InlineKeyboardButton(type, callback_data=f"type_{type}")]
            for type in types
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", reply_markup=reply_markup)

    @admin_only
    async def set_cash_source(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ù–∞–ª–∏—á–Ω–æ—Å—Ç–∏"""
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_cash_source –≤—ã–∑–≤–∞–Ω")
        query = update.callback_query
        await query.answer()
        
        db = Database()
        sources = ['–í—Å–µ'] + db.get_unique_values('cash_source', query.from_user.id)
        db.close()
        
        keyboard = [
            [InlineKeyboardButton(src, callback_data=f'source_{src}') 
            for src in sources[i:i+2]]
            for i in range(0, len(sources), 2)
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    @admin_only      
    async def set_counterparty(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"""
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_counterparty –≤—ã–∑–≤–∞–Ω")
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è:"
        )
        context.user_data['awaiting_input'] = 'counterparty'

    @admin_only
    async def set_check_num(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ß–µ–∫–∞"""
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_check_num –≤—ã–∑–≤–∞–Ω")
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞:"
        )
        context.user_data['awaiting_input'] = 'check_num'

    @admin_only
    async def set_class(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ö–ª–∞—Å—Å–∞"""
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ set_class –≤—ã–∑–≤–∞–Ω")
        query = update.callback_query
        await query.answer()
        
        db = Database()
        classes = ['–í—Å–µ'] + db.get_unique_values('transaction_class', query.from_user.id)
        db.close()
        
        keyboard = [
            [InlineKeyboardButton(cls, callback_data=f'class_{cls}') 
            for cls in classes[i:i+3]]
            for i in range(0, len(classes), 3)
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard))

    @admin_only
    async def cancel_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        context.user_data.pop('export_filters', None)
        await query.edit_message_text("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")

    @admin_only
    async def debug_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        logger.info("–ü–æ–ª—É—á–µ–Ω callback: %s", query.data)
        logger.debug(f"DEBUG_CALLBACK: –ü–æ–ª—É—á–µ–Ω callback_data: '{query.data}' –æ—Ç user_id: {query.from_user.id}") # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥
        await query.answer()

    # –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    @admin_only
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        if context.user_data.get('editing_file'):
            # –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ handle_config_edit –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            # –ï—Å–ª–∏ –∂–µ –æ–Ω–æ –¥–æ—à–ª–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
            # –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π handle_config_edit.
            # –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å,
            # —á—Ç–æ–±—ã –¥–∞—Ç—å —à–∞–Ω—Å handle_config_edit (–µ—Å–ª–∏ –æ–Ω –≤—Å–µ –∂–µ –∫–∞–∫-—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∑–∂–µ
            # –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º).
            logger.warning(f"handle_text_input: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç, –Ω–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ '{context.user_data['editing_file']}'. "
                           f"–û–∂–∏–¥–∞–ª—Å—è –≤—ã–∑–æ–≤ handle_config_edit. –¢–µ–∫—Å—Ç: {update.message.text[:100]}...")
            return # –Ø–≤–Ω–æ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç

        user_id = update.message.from_user.id
        text = update.message.text
        user_data = context.user_data
        logger.info("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç user_id %s: %s, user_data: %s", user_id, text, user_data) # user_id —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ (–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç, –ß–µ–∫)
        if 'awaiting_input' in user_data:
            filter_type = user_data['awaiting_input']
            user_data['export_filters'][filter_type] = text
            del user_data['awaiting_input']
            await self.show_filters_menu(update, context)

    @admin_only
    async def handle_filter_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        data = query.data.split('_', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
        filter_type = data[0]
        value = data[1] if len(data) > 1 else ''
        
        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        if filter_type == 'cat':
            db = Database()
            try:
                categories = db.get_unique_values("category", query.from_user.id)
                # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é safe_value
                safe_value = value
                original_value = next((cat for cat in categories if cat.replace(" ", "_").replace("'", "").replace('"', "")[:50] == safe_value), safe_value)
                context.user_data['export_filters']['category'] = original_value
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: %s", e)
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                return
            finally:
                db.close()
        elif filter_type == 'type':
            context.user_data['export_filters']['transaction_type'] = value
        elif filter_type == 'source':
            context.user_data['export_filters']['cash_source'] = value
        elif filter_type == 'class':
            context.user_data['export_filters']['transaction_class'] = value
        
        await self.show_filters_menu(update, context)

    @admin_only
    async def generate_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user_data = context.user_data
        filters = user_data['export_filters']
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: %s", filters)

        db_filters = {}
        for key in ['category', 'transaction_type', 'cash_source', 'counterparty', 'check_num', 'transaction_class']:
            if filters[key] != '–í—Å–µ':
                db_filters[key] = filters[key]
        
        filters['start_date'] = datetime.strptime(filters['start_date'], '%d.%m.%Y')
        filters['end_date'] = datetime.strptime(filters['end_date'], '%d.%m.%Y')

        db = Database()
        try:
            df = db.get_transactions(
                user_id=query.from_user.id,
                start_date=filters['start_date'],
                end_date=filters['end_date'],
                filters=db_filters if db_filters else None
            )
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", len(df))
            
            if df.empty:
                await query.edit_message_text("‚ö† –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                db.close()
                if 'export_filters' in context.user_data:
                    del context.user_data['export_filters']
                return

            df.fillna('', inplace=True)
            df['transaction_date'] = pd.to_datetime(df['transaction_date']).dt.strftime('%d.%m.%Y %H:%M')
            df.replace('NaN', '', inplace=True) # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ "NaN"
            
            logger.debug("–ó–Ω–∞—á–µ–Ω–∏—è NaN (–∏ –¥—Ä—É–≥–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ) –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.")
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            column_mapping = {
                'id': 'ID',
                'transaction_date': '–î–∞—Ç–∞',
                'amount': '–°—É–º–º–∞',
                'cash_source': '–ù–∞–ª–∏—á–Ω–æ—Å—Ç—å',
                'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
                'counterparty': '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
                'check_num': '–ß–µ–∫ #',
                'transaction_type': '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
                'transaction_class': '–ö–ª–∞—Å—Å',
                'target_amount': '–°—É–º–º–∞ (–∫—É–¥–∞)',
                'target_cash_source': '–ù–∞–ª–∏—á–Ω–æ—Å—Ç—å (–∫—É–¥–∞)'
            }
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
            # df = df.rename(columns=column_mapping)
            df_renamed = df.rename(columns=column_mapping)
            logger.debug("–°—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: %s", df.columns.tolist())
            
            with NamedTemporaryFile(suffix='.csv', delete=False, mode='w', encoding='utf-8') as tmp:
                df_renamed.to_csv(tmp.name, index=False, encoding='utf-8', sep=',')
                
            try:    
                await context.bot.send_document(
                    chat_id=query.from_user.id,
                    document=open(tmp.name, 'rb'),
                    caption=f"–û—Ç—á–µ—Ç –∑–∞ {filters['start_date'].strftime('%d.%m.%Y')} - {filters['end_date'].strftime('%d.%m.%Y')}"
                )
                # os.unlink(tmp.name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            
                # --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–í–û–î–ö–ò –ü–û –§–ò–õ–¨–¢–†–ê–ú ---
                filter_summary_lines = []
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–æ–Ω –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)
                filter_summary_lines.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {filters.get('start_date').strftime('%d.%m.%Y')} - {filters.get('end_date').strftime('%d.%m.%Y')}")
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
                filter_display_names = {
                    'category': 'üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                    'transaction_type': 'üîÄ –¢–∏–ø',
                    'cash_source': 'üí≥ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å',
                    'counterparty': 'üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
                    'check_num': 'üßæ –ß–µ–∫',
                    'transaction_class': 'üìä –ö–ª–∞—Å—Å'
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–µ, —á—Ç–æ –Ω–µ '–í—Å–µ')
                for key, display_name in filter_display_names.items():
                    filter_value = filters.get(key)
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–¥–∞–Ω –∏ –Ω–µ —Ä–∞–≤–µ–Ω '–í—Å–µ'
                    if filter_value and filter_value != '–í—Å–µ':
                        filter_summary_lines.append(f"{display_name}: {filter_value}")

                filter_summary = "\n".join(filter_summary_lines)
                # -----------------------------------------

                # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –£–°–ü–ï–•–ï ---
                success_message = "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω."
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if filter_summary:
                    success_message += "\n\n<b>–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n" + filter_summary

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode='HTML' –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
                await query.edit_message_text(success_message, parse_mode='HTML')
                # -----------------------------------------

            # await query.edit_message_text("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω") 

            except Exception as send_error:
                # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏) ...
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞: {send_error}", exc_info=True)
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞.")
            finally:
                # ... (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ...
                if os.path.exists(tmp.name):
                    os.unlink(tmp.name)

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e, exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
            if db:
                db.close()
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ user_data *–ø–æ—Å–ª–µ* –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data.pop('export_filters', None)

    @admin_only
    async def add_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        args = context.args
        if not args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/add_settings –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: –û–ê–≠ 2025\n"
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                "/add_settings\n"
                "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ 2025\n"
                "–ß–µ–∫: + —Å–≤–æ–π —Ç–µ–∫—Å—Ç"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        full_text = update.message.text[len('/add_settings'):].strip()

        # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        settings = parse_user_settings(full_text)

        if not settings:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['processing_settings'] = settings

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        response = "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        for key, value in settings.items():
            response += f"{key}: {value['value']}\n"

        await update.message.reply_text(response)

    @admin_only
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings = context.user_data.get('processing_settings', {})
        
        if not settings:
            await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return
        
        response = "‚öô –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        for key, value in settings.items():
            response += f"{key}: {value['value']}\n"
        
        await update.message.reply_text(response)

    @admin_only
    async def reset_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        context.user_data.pop('processing_settings', None)
        await update.message.reply_text("‚öô –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    @admin_only
    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        user_data = context.user_data
        message_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = parse_user_settings(message_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['processing_settings'] = settings
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        response = "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        for key, value in settings.items():
            response += f"{key}: {value['value']}\n"
        
        response += "\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        await update.message.reply_text(response)

    @admin_only
    async def view_logs_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–æ–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            log_dir = os.path.join(os.path.dirname(__file__), 'logs')
            if not os.path.exists(log_dir):
                await query.edit_message_text("–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
            log_files = sorted([
                f for f in os.listdir(log_dir) 
                if f.endswith('.log') and os.path.isfile(os.path.join(log_dir, f))
            ], reverse=True)
            
            if not log_files:
                await query.edit_message_text("–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –º–µ–Ω—é (–Ω–µ –±–æ–ª–µ–µ 20)
            log_files = log_files[:20]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤
            keyboard = [
                [InlineKeyboardButton(f, callback_data=f'logfile_{f}')]
                for f in log_files
            ]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=reply_markup
                )
            except telegram.error.BadRequest as e:
                if "not modified" in str(e):
                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É")
                else:
                    raise
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ª–æ–≥–æ–≤: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤")

    async def cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        if 'adding_pattern' in context.user_data:
            del context.user_data['adding_pattern']
            self.application.remove_handler(self.pattern_handler)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        elif 'editing_file' in context.user_data:
            self.remove_config_handlers()
            del context.user_data['editing_file']
            await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    @admin_only
    async def handle_pattern_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ callback_data
        safe_category = query.data.replace('addpat_', '')
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        from classify_transactions_pdf import load_config
        config = load_config()
        
        full_category = None
        for cat in config['categories']:
            if cat['name'].replace(" ", "_")[:30] == safe_category:
                full_category = cat['name']
                break
        
        if not full_category:
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        context.user_data['adding_pattern'] = {
            'category': full_category,
            'message': await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {full_category}\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ).\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_pattern_input
        ))

    @admin_only
    def safe_calendar_pattern_wrapper(self, original_pattern_callable):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è AttributeErrors."""
        def wrapper(data: str) -> bool:
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                return original_pattern_callable(data)
            except AttributeError as e:
                # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É, —É–∫–∞–∑—ã–≤–∞—é—â—É—é –Ω–∞ —Å—Ç—Ä–æ–∫—É –±–µ–∑ .data
                if "'str' object has no attribute 'data'" in str(e):
                    return False # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–∞—Ç—Ç–µ—Ä–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                # –ü–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ AttributeErrors
                raise
            # –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º TypeError –∏ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        return wrapper

    @admin_only
    async def handle_pattern_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if 'adding_pattern' not in context.user_data:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")
            return
        
        pattern = update.message.text
        category = context.user_data['adding_pattern']['category']
        
        try:
            from classify_transactions_pdf import add_pattern_to_category
            add_pattern_to_category(category, pattern)
            
            await update.message.reply_text(
                f"–ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {str(e)}"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if 'adding_pattern' in context.user_data:
                del context.user_data['adding_pattern']
            self.application.remove_handler(self.pattern_handler)

    @admin_only
    async def add_pattern(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
            args = shlex.split(update.message.text)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–∫–æ–º–∞–Ω–¥–∞ + 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞)
            if len(args) != 3:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_pattern \"–ö–∞—Ç–µ–≥–æ—Ä–∏—è\" \"–ü–∞—Ç—Ç–µ—Ä–Ω\"\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /add_pattern \"–ï–¥–∞\" \"VKUSVILL\""
                )
                return
                
            category = args[1]  # "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ"
            pattern = args[2]   # "VET UNION"

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–±–µ–ª—ã
            # try:
            #     category = ' '.join(args[:-1]).strip('"\'')
            #     pattern = args[-1].strip('"\'')

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            from classify_transactions_pdf import add_pattern_to_category
            add_pattern_to_category(category, pattern)
            
            await update.message.reply_text(f"–ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {str(e)}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

    @admin_only
    async def add_pattern_interactive(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        from classify_transactions_pdf import load_config
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ callback_data
        categories = []
        for cat in config['categories']:
            name = cat['name']
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É
            safe_name = name.replace(" ", "_")[:30]  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤
            categories.append((name, f'addpat_{safe_name}'))
        
        if not categories:
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton(name, callback_data=callback_data)]
            for name, callback_data in categories
        ]
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞:",
                reply_markup=reply_markup
            )
        except telegram.error.BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        context.user_data['next_step'] = 'await_pattern'

    @admin_only
    async def config_selection_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        config_map = {
            'view_categories': 'categories.yaml',
            'view_special': 'special_conditions.yaml',
            'view_pdf_patterns': 'pdf_patterns.yaml',
            'view_timeouts': 'timeouts.yaml'
        }
        
        if query.data == 'back_to_main':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message –≤–º–µ—Å—Ç–æ update
            await self.show_config_menu(query.message)
            return
        elif query.data == 'view_all':
            await self.send_all_config_files(query)
            return
        
        filename = config_map[query.data]
        await self.send_single_config_file(query, filename)

    @admin_only
    async def send_single_config_file(self, query, filename):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        config_dir = os.path.join(os.path.dirname(__file__), 'config')
        # config_dir = '/app/config'
        filepath = os.path.join(config_dir, filename)
        
        descriptions = {
            'categories.yaml': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            'special_conditions.yaml': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
            'pdf_patterns.yaml': 'PDF –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
            'timeouts.yaml': '–¢–∞–π–º–∞—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        }
        
        if os.path.exists(filepath):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(
                    f"*{descriptions.get(filename, filename)}*:\n```yaml\n{content}\n```",
                    parse_mode='Markdown'
                )
                
                # –ò–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ
                # with open(filepath, 'rb') as f:
                #     await query.message.reply_document(
                #         document=f,
                #         caption=f"{descriptions.get(filename, filename)}"
                #     )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
                await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}")
        else:
            await query.message.reply_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    @admin_only
    async def send_all_config_files(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        config_files = {
            'categories.yaml': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            'special_conditions.yaml': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
            'pdf_patterns.yaml': 'PDF –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
            'timeouts.yaml': '–¢–∞–π–º–∞—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        }
        
        for filename, description in config_files.items():
            await self.send_single_config_file(query, filename)
            await asyncio.sleep(0.5)
            
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        error = context.error
        logger.error("–û—à–∏–±–∫–∞: %s, update: %s", error, update, exc_info=True)

        if isinstance(error, telegram.error.Forbidden):
            logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        elif isinstance(error, telegram.error.BadRequest):
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: {error}")
            if isinstance(update, Update) and update.callback_query:
                try:
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                except:
                    pass
            return
        
        logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)
        if isinstance(update, Update) and update.callback_query:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    # –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @admin_only
    @admin_only
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n"
            "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-–≤—ã–ø–∏—Å–æ–∫ –∏–∑ –±–∞–Ω–∫–æ–≤ (Tinkoff, –°–±–µ—Ä–±–∞–Ω–∫, –Ø–Ω–¥–µ–∫—Å –∏ –¥—Ä—É–≥–∏–µ)\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n\n"
            "üìÑ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:</b>\n"
            "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–æ–π\n"
            "2. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∏ –≤–µ—Ä–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "3. –î–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª\n\n"
            "‚öô <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/config - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ç–∞–π–º–∞—É—Ç—ã)\n"
            "/add_pattern - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/reset - –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</b>\n"
            "‚Ä¢ <code>/add_pattern \"–ï–¥–∞\" \"VKUSVILL\"</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ <code>PDF: 1</code> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "‚Ä¢ <code>–ß–µ–∫ #: + –ù–î–°</code> - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º —á–µ–∫–∞–º\n\n"
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        await update.message.reply_text(welcome_text, parse_mode='HTML')

    @admin_only
    async def show_config_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if isinstance(update, Update) and update.message:
            message = update.message
        elif isinstance(update, Update) and update.callback_query and update.callback_query.message:
            message = update.callback_query.message
        elif hasattr(update, 'reply_text'):  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            message = update
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è show_config_menu")
            return
        
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='view_config')],
            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='edit_config')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é - –ü–∞—Ç—Ç–µ—Ä–Ω", callback_data='add_pattern_interactive')],
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", callback_data='view_logs')],
            [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data='restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:",
            reply_markup=reply_markup
        )

    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @admin_only
    async def main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'view_config':
            await self.show_config_selection(update, context)
        elif query.data == 'edit_config':
            await self.show_edit_menu(update, context)
        elif query.data == 'view_logs':
            await self.view_logs_callback(update, context)
        elif query.data == 'restart':
            await self.restart_bot(update, context)

    @admin_only
    async def show_config_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        query = update.callback_query
        await query.answer()

        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='view_categories')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é - –ø–∞—Ç—Ç–µ—Ä–Ω", callback_data='add_pattern_interactive')],
            [InlineKeyboardButton("–°–ø–µ—Ü. —É—Å–ª–æ–≤–∏—è", callback_data='view_special')],
            [InlineKeyboardButton("PDF –ø–∞—Ç—Ç–µ—Ä–Ω—ã", callback_data='view_pdf_patterns')],
            [InlineKeyboardButton("–¢–∞–π–º–∞—É—Ç—ã", callback_data='view_timeouts')],
            [InlineKeyboardButton("–í—Å–µ —Ñ–∞–π–ª—ã", callback_data='view_all')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )

    @admin_only
    async def edit_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'cancel':
            await query.edit_message_text(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        config_map = {
            'edit_categories': 'categories.yaml',
            'edit_special': 'special_conditions.yaml',
            'edit_pdf_patterns': 'pdf_patterns.yaml',
            'edit_timeouts': 'timeouts.yaml',
            'edit_class_contractor.yaml': 'class_contractor.yaml'
        }
        filename = config_map.get(query.data)

        if not filename:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        context.user_data['editing_file'] = filename
        logger.info(f"edit_menu_callback: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω editing_file: {filename}. –î–æ–±–∞–≤–ª—è—é config_handlers –≤ –≥—Ä—É–ø–ø—É -1.")

        await query.edit_message_text(
            text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {filename} –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ "
                 "–∏–ª–∏ —Ñ–∞–π–ª–æ–º YAML. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        handlers_added_count = 0
        for handler_obj in self.config_handlers: # handler_obj —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π handler –∏–∑ PTB
            handler_name = "handle_config_edit" if handler_obj.callback == self.handle_config_edit else "handle_config_upload"
            logger.debug(f"edit_menu_callback: –î–æ–±–∞–≤–ª—è—é config_handler ({handler_name}) —Å ID: {id(handler_obj)} –≤ –≥—Ä—É–ø–ø—É -1.")
            self.application.add_handler(handler_obj, group=-1)
            handlers_added_count += 1
        logger.info(f"edit_menu_callback: –î–æ–±–∞–≤–ª–µ–Ω–æ {handlers_added_count} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ self.config_handlers –≤ –≥—Ä—É–ø–ø—É -1.")

    @admin_only
    async def show_edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='edit_categories')],
            [InlineKeyboardButton("–°–ø–µ—Ü. —É—Å–ª–æ–≤–∏—è", callback_data='edit_special')],
            [InlineKeyboardButton("PDF –ø–∞—Ç—Ç–µ—Ä–Ω—ã", callback_data='edit_pdf_patterns')],
            [InlineKeyboardButton("–¢–∞–π–º–∞—É—Ç—ã", callback_data='edit_timeouts')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )

    @admin_only
    async def send_config_files(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        config_dir = os.path.join(os.path.dirname(__file__), 'config')
        # config_dir = '/app/config'
        
        config_files = {
            'categories.yaml': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            'special_conditions.yaml': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
            'timeouts.yaml': '–¢–∞–π–º–∞—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        }
        
        for filename, description in config_files.items():
            filepath = os.path.join(config_dir, filename)
            if os.path.exists(filepath):
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(content) > 4000:
                        parts = [content[i:i+4000] for i in range(0, len(content), 4000)]
                        for part in parts:
                            await query.message.reply_text(f"`{part}`", parse_mode='Markdown')
                            await asyncio.sleep(0.5)
                    else:
                        await query.message.reply_text(f"*{description}*:\n`{content}`", 
                                                    parse_mode='Markdown')
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
                    await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {filename}")
            else:
                await query.message.reply_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    @admin_only
    async def handle_config_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞"""
        logger.debug("handle_config_edit: editing_file = %s", context.user_data.get('editing_file'))
        logger.debug("handle_config_edit: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        # logger.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {filepath}")
        # logger.info(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(filepath)}")
        # logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {os.access(config_dir, os.W_OK)}")
        # logger.info(f"–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏: {os.path.exists(filepath) and os.access(filepath, os.W_OK)}")
        logger.info("handle_config_edit: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.") # –î–æ–±–∞–≤–ª–µ–Ω–æ
        
        if 'editing_file' not in context.user_data:
            logger.warning("handle_config_edit: 'editing_file' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data.") # –î–æ–±–∞–≤–ª–µ–Ω–æ
            await update.message.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        filename = context.user_data['editing_file']
        new_content_text = update.message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç

        logger.info(f"handle_config_edit: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ñ–∞–π–ª: {filename}") # –î–æ–±–∞–≤–ª–µ–Ω–æ
        logger.debug(f"handle_config_edit: –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{new_content_text[:500]}...") # –î–æ–±–∞–≤–ª–µ–Ω–æ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)

        try:
            logger.info("handle_config_edit: –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML...") # –î–æ–±–∞–≤–ª–µ–Ω–æ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å YAML
            parsed_data = yaml.safe_load(new_content_text)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if parsed_data is None:
                 await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å YAML.")
                 return
            if not isinstance(parsed_data, dict): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ—Ä–µ–Ω—å - —Å–ª–æ–≤–∞—Ä—å
                 await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç YAML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'categories:')")
                 return
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è categories.yaml
            if filename == 'categories.yaml' and ('categories' not in parsed_data or not isinstance(parsed_data['categories'], list)):
                await update.message.reply_text("–û—à–∏–±–∫–∞: –§–∞–π–ª categories.yaml –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'categories' —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_dir = os.path.join(os.path.dirname(__file__), 'config')
            # config_dir = '/app/config'
            filepath = os.path.join(config_dir, filename)
            logger.info(f"handle_config_edit: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {filepath}") # –î–æ–±–∞–≤–ª–µ–Ω–æ
            # logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤: {filepath}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not os.path.exists(config_dir):
                try:
                    os.makedirs(config_dir, mode=0o775)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config_dir}")
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {config_dir}: {e}")
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not os.access(config_dir, os.W_OK):
                logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {config_dir}")
                await update.message.reply_text(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {config_dir}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
            if os.path.exists(filepath) and not os.access(filepath, os.W_OK):
                logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª {filepath}")
                await update.message.reply_text(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª {filepath}")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Python –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ YAML —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                # ensure_ascii=False –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, allow_unicode=True —Ç–æ–∂–µ –ø–æ–ª–µ–∑–Ω–æ
                logger.info("handle_config_edit: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞...") # –î–æ–±–∞–≤–ª–µ–Ω–æ
                yaml_to_write = yaml.dump(parsed_data, allow_unicode=True, sort_keys=False, indent=2)

                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(yaml_to_write) # <-- –ü–∏—à–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π YAML
                logger.info(f"handle_config_edit: –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {filepath}")
                # !!! –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ !!!
                await update.message.reply_text(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

            except (IOError, PermissionError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                return
                        
        except yaml.YAMLError as e:
            logger.error(f"handle_config_edit: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {str(e)}", exc_info=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ exc_info
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ YAML: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        except Exception as e:
            logger.error(f"handle_config_edit: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ exc_info
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

        finally: # –î–æ–±–∞–≤–ª–µ–Ω–æ
            logger.info("handle_config_edit: –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ 'editing_file'.") # –î–æ–±–∞–≤–ª–µ–Ω–æ
            self.remove_config_handlers() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
            if 'editing_file' in context.user_data:
                del context.user_data['editing_file']
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            # await self.show_config_menu(update, context) # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å, –∏–ª–∏ –Ω—É–∂–Ω–æ update.message

    @admin_only
    async def handle_config_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ —Ñ–∞–π–ª–æ–º"""
        if 'editing_file' not in context.user_data:
            await update.message.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        filename = context.user_data['editing_file']
        document = update.message.document
        
        if not document.file_name.lower().endswith('.yaml'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ YAML")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            config_dir = os.path.join(os.path.dirname(__file__), 'config')
            # config_dir = '/app/config'
            filepath = os.path.join(config_dir, filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            # file = await document.get_file()
            file = await document.get_file(
                read_timeout=30,
                connect_timeout=30,
                pool_timeout=30,
                write_timeout=30
            )
            downloaded_file = await file.download_to_drive()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å YAML
            with open(downloaded_file, 'r', encoding='utf-8') as f:
                content = f.read()
                yaml.safe_load(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not os.path.exists(config_dir):
                try:
                    os.makedirs(config_dir)
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {config_dir}: {e}")
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
                    return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            os.replace(downloaded_file, filepath)

            logger.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—É—Ç–∏: {filepath}")
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
        except yaml.YAMLError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ YAML: {str(e)}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ YAML: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            if os.path.exists(downloaded_file):
                os.unlink(downloaded_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
            if os.path.exists(downloaded_file):
                os.unlink(downloaded_file)

        finally: # –î–æ–±–∞–≤–ª–µ–Ω–æ
            logger.info("handle_config_upload: –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ 'editing_file'.") # –î–æ–±–∞–≤–ª–µ–Ω–æ
            self.remove_config_handlers() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
            if 'editing_file' in context.user_data:
                del context.user_data['editing_file']

    def remove_config_handlers(self):
        """–£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
        logger.info("remove_config_handlers: –£–¥–∞–ª—è—é config_handlers –∏–∑ –≥—Ä—É–ø–ø—ã -1.")
        for handler_obj in self.config_handlers: # handler_obj
            handler_name = "handle_config_edit" if handler_obj.callback == self.handle_config_edit else "handle_config_upload"
            logger.debug(f"remove_config_handlers: –£–¥–∞–ª—è—é config_handler ({handler_name}) —Å ID: {id(handler_obj)} –∏–∑ –≥—Ä—É–ø–ø—ã -1.")
            self.application.remove_handler(handler_obj, group=-1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    @admin_only
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_data = context.user_data
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = user_data.get('processing_settings', {})
        return_files = settings.get('pdf', {'value': '0'})['value']
        if return_files not in ('0', '1', '2'):
            return_files = '0'
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PDF: {return_files}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '0'")
        
        # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        user_data.pop('processing_settings', None)
        
        document = update.message.document
        if not document.file_name.lower().endswith('.pdf'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            return

        if document.file_size > 10 * 1024 * 1024:  # 10 MB
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.")
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {document.file_name}")
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {document.file_name}, —Ä–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: return_files={return_files}")

        tmp_pdf_path = temp_csv_path = combined_csv_path = result_csv_path = unclassified_csv_path = None

        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF
            pdf_file = BytesIO()
            file = await document.get_file()
            await file.download_to_memory(out=pdf_file)
            pdf_file.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

            with NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_pdf:
                tmp_pdf.write(pdf_file.getbuffer())
                tmp_pdf_path = tmp_pdf.name

            temp_csv_path, pdf_type = await asyncio.to_thread(extract_pdf1, tmp_pdf_path)
            combined_csv_path = await asyncio.to_thread(extract_pdf2, temp_csv_path, pdf_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –û–ë–ê –ø—É—Ç–∏
            result_csv_path, unclassified_csv_path = await asyncio.to_thread(
                classify_transactions, combined_csv_path, pdf_type, user_settings=settings
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            files_to_send = []
            
            if return_files == '1':
                files_to_send.append(temp_csv_path)
            elif return_files == '2':
                files_to_send.extend([temp_csv_path, combined_csv_path])
            else:  # default - —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
                files_to_send.append(result_csv_path)
                # –î–æ–±–∞–≤–ª—è–µ–º unclassified —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                if unclassified_csv_path and os.path.exists(unclassified_csv_path):
                    files_to_send.append(unclassified_csv_path)
            
            # db = Database()
            # db.save_transactions(pd.read_csv(result_csv_path), update.effective_user.id)
            # db.close()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file_path in files_to_send:
                if file_path and os.path.exists(file_path):
                    caption = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏" if file_path == unclassified_csv_path else None
                    with open(file_path, 'rb') as f:
                        await update.message.reply_document(document=f, caption=caption)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # context.user_data['pending_data'] = {
            #     'df': pd.read_csv(result_csv_path),
            #     'timestamp': time.time()
            # }
            
            df = pd.read_csv(
                result_csv_path,
                sep=';',          # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                quotechar='"',     # –°–∏–º–≤–æ–ª –∫–∞–≤—ã—á–µ–∫
                encoding='utf-8',  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
                on_bad_lines='warn' # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                )

            context.user_data['pending_data'] = {
                'df': df,
                'timestamp': time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            }
            context.user_data['temp_files'] = [
                tmp_pdf_path,
                temp_csv_path,
                combined_csv_path,
                result_csv_path,
                unclassified_csv_path
            ]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data='save_yes'),
                InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data='save_no')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            await update.message.reply_text(
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?",
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞\n"
                "2. –§–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                "3. –§–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º (Tinkoff, –°–±–µ—Ä–±–∞–Ω–∫, –Ø–Ω–¥–µ–∫—Å)"
            )
            # –£–¥–∞–ª—è–µ–º pending_data –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'pending_data' in context.user_data:
                del context.user_data['pending_data']

        finally:
            if pdf_file:
                pdf_file.close()
            if tmp_pdf:
                tmp_pdf.close()

    @admin_only
    async def handle_save_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_data = context.user_data
        
        if query.data == 'save_no':
            await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            if 'temp_files' in user_data:
                await self.cleanup_files(user_data['temp_files'])
                del user_data['temp_files']
            
            if 'pending_data' in user_data:
                del user_data['pending_data']
            return
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–î–∞" –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        pending_data = user_data.get('pending_data', {})
        
        if not pending_data or 'timestamp' not in pending_data or 'df' not in pending_data:
            await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
            return
            
        if time.time() - pending_data['timestamp'] > 300:
            await query.edit_message_text("–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)")
            return

        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: %s", pending_data['df'][['–î–∞—Ç–∞']].head().to_dict())
        db = None
        try:
            db = Database()
            stats = db.save_transactions(pending_data['df'], query.from_user.id)
            
            logger.info(
                f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –Ω–æ–≤—ã—Ö - {stats['new']}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - {stats['duplicates']}"
            )
            
            if stats['duplicates'] > 0:
                context.user_data['pending_duplicates'] = stats['duplicates_list']
                keyboard = [
                    [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã ‚úÖ", callback_data='update_duplicates')],
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå", callback_data='skip_duplicates')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"–ù–∞–π–¥–µ–Ω–æ {stats['duplicates']} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏?",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {stats['new']} –∑–∞–ø–∏—Å–µ–π"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä PostgreSQL\n"
                "2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (DB_HOST, DB_PORT –∏ –¥—Ä.)"
            )
        finally:
            if db is not None:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                db.close()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if 'temp_files' in user_data:
                await self.cleanup_files(user_data['temp_files'])
                del user_data['temp_files']
            
            if 'pending_data' in user_data:
                del user_data['pending_data']

    def update_transaction(self, date, amount, new_category):
        with self.get_cursor() as cur:
            cur.execute("""
                UPDATE transactions 
                SET category = %s 
                WHERE transaction_date = %s 
                AND amount = %s
            """, (new_category, date, amount))

    @admin_only
    async def handle_duplicates_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_data = context.user_data
        duplicates = user_data.get('pending_duplicates', [])
        
        if not duplicates:
            await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        if query.data == 'update_duplicates':
            try:
                db = Database()
                updated = 0
                
                for row in duplicates:
                    # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    # –ù–∞–ø—Ä–∏–º–µ—Ä:
                    db.update_transaction(
                        date=row['–î–∞—Ç–∞'],
                        amount=row['–°—É–º–º–∞'],
                        new_category=row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']
                    )
                    updated += 1
                    
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                await query.edit_message_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
                
        elif query.data == 'skip_duplicates':
            await query.edit_message_text("–î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user_data.pop('pending_duplicates', None)


    @admin_only
    async def cleanup_files(self, file_paths):
        for path in file_paths:
            if path and os.path.exists(path) and os.path.isfile(path):
                try:
                    await asyncio.to_thread(os.unlink, path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")

    @admin_only
    async def handle_logfile_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        filename = query.data.replace('logfile_', '')
        log_path = os.path.join(os.path.dirname(__file__), 'logs', filename)
        
        if not os.path.exists(log_path):
            await query.edit_message_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫", callback_data=f'logview_text_{filename}'),
                InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f'logview_file_{filename}')
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º", callback_data='view_logs')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                text=f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {filename}\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏?",
                reply_markup=reply_markup
            )
        except telegram.error.BadRequest as e:
            if "not modified" in str(e):
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @admin_only
    async def handle_log_view_option(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        action, filename = query.data.replace('logview_', '').split('_', 1)
        log_path = os.path.join(os.path.dirname(__file__), 'logs', filename)

        file_size = os.path.getsize(log_path)
        if file_size > 5 * 1024 * 1024:  # 5 MB
            await query.message.reply_text("–§–∞–π–ª –ª–æ–≥–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>5 MB) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.")
            return
        
        try:
            if action == 'text':
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                with open(log_path, 'r', encoding='utf-8', errors='replace') as f:
                    lines = f.readlines()[-100:]
                    content = ''.join(lines)
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                content = self.sanitize_log_content(content)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(content) > 4000:
                    parts = [content[i:i+4000] for i in range(0, len(content), 4000)]
                    for part in parts:
                        try:
                            await query.message.reply_text(
                                f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ {filename}:\n<pre>{part}</pre>",
                                parse_mode='HTML'
                            )
                        except Exception:
                            await query.message.reply_text(
                                f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ {filename}:\n{part}"
                            )
                        await asyncio.sleep(0.5)
                else:
                    try:
                        await query.message.reply_text(
                            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ {filename}:\n<pre>{content}</pre>",
                            parse_mode='HTML'
                        )
                    except Exception:
                        await query.message.reply_text(
                            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ {filename}:\n{content}"
                        )
                    
            elif action == 'file':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º
                with open(log_path, 'rb') as f:
                    await query.message.reply_document(
                        document=f,
                        caption=f"–ü–æ–ª–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª: {filename}"
                    )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            try:
                await self.handle_logfile_selection(update, context)
            except telegram.error.BadRequest as e:
                if "not modified" in str(e):
                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É")
                else:
                    raise
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
            try:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞: {str(e)}")
            except telegram.error.BadRequest:
                pass

    def sanitize_log_content(self, content: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ª–æ–≥–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        replacements = {
            '<': '&lt;',
            '>': '&gt;',
            '&': '&amp;',
            '`': "'",
            '*': '',
            '_': '',
            '[': '(',
            ']': ')',
            '~': '-'
        }
        for old, new in replacements.items():
            content = content.replace(old, new)
        return content

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞
    @admin_only
    async def restart_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º query –∏–∑ update
            query = update.callback_query if hasattr(update, 'callback_query') else None
            
            if query:
                try:
                    await query.answer()
                    await query.edit_message_text(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                except telegram.error.BadRequest as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if update.message:
                    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            asyncio.create_task(self.delayed_restart())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            if query:
                try:
                    await query.edit_message_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
                except telegram.error.BadRequest:
                    pass

    @admin_only
    async def delayed_restart(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self._is_restarting:
            return
        self._is_restarting = True
        
        try:
            logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...")
            if self._in_docker:
                logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤ Docker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'docker restart'.")
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if self.application.updater and self.application.updater.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
                await self.application.updater.stop()
                await asyncio.sleep(1)
                
            if self.application.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application...")
                await self.application.stop()
                await asyncio.sleep(1)
                
                logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É application...")
                await self.application.shutdown()
                await asyncio.sleep(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (—Ç–æ–ª—å–∫–æ –≤–Ω–µ Docker)
            TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
            if not TOKEN:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                return
            
            logger.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
            subprocess.Popen([sys.executable, __file__])
            
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
            await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            os._exit(0)

            await asyncio.wait_for(self.application.shutdown(), timeout=10)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            os._exit(1)

        finally:
            self._is_restarting = False

    @admin_only
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
            await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            
            if self.application.updater and self.application.updater.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
                await self.application.updater.stop()
                await asyncio.sleep(1)
                
            if self.application.running:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application...")
                await self.application.stop()
                await asyncio.sleep(1)
                
                logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É application...")
                await self.application.shutdown()
                await asyncio.sleep(1)
            
            logger.info("–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            raise

    def run(self):
        if self._is_running:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
            return
            
        self._is_running = True
        
        if self._in_docker:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        try:
            logger.debug("!!!!!!!!!!!!!!!!! RUN_POLLING –°–¢–ê–†–¢–£–ï–¢ !!!!!!!!!!!!!!!!!") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
            self.application.run_polling(
                poll_interval=2.0,
                timeout=self.request_timeout,
                # close_loop=False, # –≠—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
                stop_signals=None # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∏–∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç –µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ exc_info
           
def docker_healthcheck():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è Docker"""
    try:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        return True
    except Exception:
        return False

# if os.getenv('DOCKER_MODE'):
#     logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Docker –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–ø—É—Å–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        sys.exit(1)
    
    try:
        bot = TransactionProcessorBot(TOKEN)
        # logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)