# handlers/edit.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from db.base import DBConnection
from db.transactions import (
    check_existing_ids,
    get_transactions,
    update_transactions,
    get_transaction_fields,
)
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


def build_edit_keyboard(
    updates: dict | None = None,
    add_confirm: bool = False,
    copied_from_id: int | None = None,
) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π —Å —É—á—ë—Ç–æ–º –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""

    def button_text(label: str, field: str) -> str:
        if field == "copy_from_id" and copied_from_id is not None:
            return f"{label}: {copied_from_id}"
        if updates is not None:
            if field in updates:
                value = updates[field][0]
                short = value if len(value) <= 20 else value[:17] + "..."
                return f"{label}: {short}"
            else:
                return f"{label}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            
        return label

    keyboard = [
        [InlineKeyboardButton(button_text("üìã –ò–∑ ID", "copy_from_id"), callback_data='edit_copy_from_id')],
        [InlineKeyboardButton("üìë –®–∞–±–ª–æ–Ω—ã", callback_data='edit_show_templates')],
        [InlineKeyboardButton(button_text("üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", "category"), callback_data='edit_field_category')],
        [InlineKeyboardButton(button_text("üìù –û–ø–∏—Å–∞–Ω–∏–µ", "description"), callback_data='edit_field_description')],
        [InlineKeyboardButton(button_text("üë• –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "counterparty"), callback_data='edit_field_counterparty')],
        [InlineKeyboardButton(button_text("üßæ –ß–µ–∫ #", "check_num"), callback_data='edit_field_check_num')],
        [InlineKeyboardButton(button_text("üí≥ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å", "cash_source"), callback_data='edit_field_cash_source')],
        [InlineKeyboardButton(button_text("üí∏ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å (–∫—É–¥–∞)", "target_cash_source"), callback_data='edit_field_target_cash_source')],
        [InlineKeyboardButton(button_text("üîÄ –¢–∏–ø", "transaction_type"), callback_data='edit_field_transaction_type')],
        [InlineKeyboardButton(button_text("üìä –ö–ª–∞—Å—Å", "transaction_class"), callback_data='edit_field_transaction_class')],
        [InlineKeyboardButton(button_text("üìÑ –¢–∏–ø PDF", "pdf_type"), callback_data='edit_field_pdf_type')],
    ]

    if add_confirm:
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_edits')])

    keyboard.extend([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_edit_choice')],
        [InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
    ])

    return InlineKeyboardMarkup(keyboard)


def parse_ids_input(text: str) -> list[int]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ ID.
    """
    if '-' in text:
        start, end = map(int, text.split('-'))
        return list(range(start, end + 1))
    return [int(id_str.strip()) for id_str in text.split(',')]


def get_valid_ids(text: str) -> list[int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ID –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
    """
    parsed_ids = parse_ids_input(text)
    with DBConnection() as db:
        existing = check_existing_ids(parsed_ids, db=db)
    if not existing:
        raise ValueError("‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
    return existing


async def apply_edits(context: ContextTypes.DEFAULT_TYPE, user_id: int, edit_mode: dict, new_value: str) -> tuple[int, str]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –±–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
    """
    if edit_mode['type'] == 'edit_by_filter':
        ids = edit_mode.get('ids', [])
        if not ids:
            filters = edit_mode.get('edit_filters')
            if not filters:
                raise ValueError("‚ö† –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            with DBConnection() as db:
                df = get_transactions(
                    user_id=user_id,
                    start_date=datetime.strptime(filters['start_date'], '%d.%m.%Y'),
                    end_date=datetime.strptime(filters['end_date'], '%d.%m.%Y'),
                    filters={k: v for k, v in filters.items() if v != '–í—Å–µ'},
                    db=db
                )
            ids = df['id'].tolist()
            if not ids:
                raise ValueError("‚ö† –ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π.")

    else:
        ids = edit_mode.get('ids', [])

    updates = {
        edit_mode['field']: (new_value, edit_mode['mode'])
    }

    with DBConnection() as db:
        updated_ids = update_transactions(
            user_id=user_id,
            ids=ids,
            updates=updates,
            db=db
        )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª {len(updated_ids)} –∑–∞–ø–∏—Å–µ–π: {updated_ids}. –ü–æ–ª–µ: {edit_mode['field']}")
    return len(updated_ids), edit_mode['field']
