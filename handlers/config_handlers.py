# handlers/config_handlers.py

import os
import yaml
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters, CommandHandler
from handlers.utils import ADMIN_FILTER

logger = logging.getLogger(__name__)

CONFIG_FILES = {
    'view_categories': 'categories.yaml',
    'view_special': 'special_conditions.yaml',
    'view_pdf_patterns': 'pdf_patterns.yaml',
    'view_timeouts': 'timeouts.yaml',
    'view_all': None
}


def register_config_menu_handlers(application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã, —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ YAML-–∫–æ–Ω—Ñ–∏–≥–∞–º–∏:
    –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ.
    """
    application.add_handler(CallbackQueryHandler(config_selection_callback, pattern=r'^(view_categories|view_special|view_pdf_patterns|view_timeouts|view_all|back_to_main)$'))
    application.add_handler(CallbackQueryHandler(main_menu_callback, pattern='^(view_config|edit_config|restart|view_logs)$'))
    application.add_handler(CallbackQueryHandler(edit_menu_callback, pattern='^(edit_categories|edit_special|edit_pdf_patterns|edit_timeouts|cancel)$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ADMIN_FILTER, handle_config_edit), group=2)
    application.add_handler(MessageHandler(filters.Document.ALL & ADMIN_FILTER, handle_config_upload), group=2)
    application.add_handler(CommandHandler("config", handle_config_command, filters=ADMIN_FILTER))

async def handle_config_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /config ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏.
    """
    await show_config_menu(update)

async def config_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    query = update.callback_query
    await query.answer()

    if query.data == 'back_to_main':
        await show_config_menu(query.message)
        return
    elif query.data == 'view_all':
        await send_all_config_files(query)
        return

    filename = CONFIG_FILES.get(query.data)
    await send_single_config_file(query, filename)


async def show_config_menu(message_or_update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    if isinstance(message_or_update, Update):
        message = message_or_update.message or message_or_update.callback_query.message
    else:
        message = message_or_update

    keyboard = [
        [InlineKeyboardButton("üîé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='view_config')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='edit_config')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é - –ü–∞—Ç—Ç–µ—Ä–Ω", callback_data='add_pattern_interactive')],
        [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", callback_data='view_logs')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data='restart')]
    ]
    await message.reply_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:", reply_markup=InlineKeyboardMarkup(keyboard))


async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–º."""
    query = update.callback_query
    await query.answer()

    match query.data:
        case 'view_config': await show_config_selection(update)
        case 'edit_config': await show_edit_menu(update)
        case 'view_logs': await context.bot.send_message(chat_id=query.message.chat.id, text="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...")
        case 'restart': await context.bot.send_message(chat_id=query.message.chat.id, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")


async def show_config_selection(update: Update):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='view_categories')],
        [InlineKeyboardButton("–°–ø–µ—Ü. —É—Å–ª–æ–≤–∏—è", callback_data='view_special')],
        [InlineKeyboardButton("PDF –ø–∞—Ç—Ç–µ—Ä–Ω—ã", callback_data='view_pdf_patterns')],
        [InlineKeyboardButton("–¢–∞–π–º–∞—É—Ç—ã", callback_data='view_timeouts')],
        [InlineKeyboardButton("–í—Å–µ —Ñ–∞–π–ª—ã", callback_data='view_all')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=InlineKeyboardMarkup(keyboard))

async def send_single_config_file(query, filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é YAML-—Ñ–∞–π–ª."""
    config_dir = os.path.join(os.path.dirname(__file__), '..', 'config')
    filepath = os.path.join(config_dir, filename)
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()

        if len(content) > 4000:
            with open(filepath, 'rb') as f_bin:
                await query.message.reply_document(document=f_bin)
        else:
            await query.message.reply_text(
                f"*{filename}*:\n```yaml\n{content}\n```",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}")


async def send_all_config_files(query):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ YAML-—Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    for key, filename in CONFIG_FILES.items():
        if filename:
            await send_single_config_file(query, filename)
            await asyncio.sleep(0.5)


async def edit_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    filename = CONFIG_FILES.get(query.data)
    if not filename:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª.")
        return

    context.user_data['editing_file'] = filename
    await query.edit_message_text(
        text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ YAML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {filename} –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


async def show_edit_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='edit_categories')],
        [InlineKeyboardButton("–°–ø–µ—Ü. —É—Å–ª–æ–≤–∏—è", callback_data='edit_special')],
        [InlineKeyboardButton("PDF –ø–∞—Ç—Ç–µ—Ä–Ω—ã", callback_data='edit_pdf_patterns')],
        [InlineKeyboardButton("–¢–∞–π–º–∞—É—Ç—ã", callback_data='edit_timeouts')],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_config_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º YAML."""
    filename = context.user_data.get('editing_file')
    if not filename:
        return

    config_dir = os.path.join(os.path.dirname(__file__), '..', 'config')
    filepath = os.path.join(config_dir, filename)

    try:
        parsed_data = yaml.safe_load(update.message.text)
        with open(filepath, 'w', encoding='utf-8') as f:
            yaml.dump(parsed_data, f, allow_unicode=True, sort_keys=False)
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ YAML: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ YAML: {e}")
    finally:
        context.user_data.pop('editing_file', None)


async def handle_config_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É YAML-—Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    filename = context.user_data.get('editing_file')
    if not filename:
        return

    document = update.message.document
    config_dir = os.path.join(os.path.dirname(__file__), '..', 'config')
    filepath = os.path.join(config_dir, filename)

    try:
        new_file = await document.get_file()
        downloaded_path = await new_file.download_to_drive()
        with open(downloaded_path, 'r', encoding='utf-8') as f:
            yaml.safe_load(f.read())
        os.replace(downloaded_path, filepath)
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        context.user_data.pop('editing_file', None)
